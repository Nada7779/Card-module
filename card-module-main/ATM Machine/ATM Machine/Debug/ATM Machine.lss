
ATM Machine.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000135a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000005c  00800060  0000135a  000013ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000142a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000145c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000250  00000000  00000000  00001498  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002ad8  00000000  00000000  000016e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000f95  00000000  00000000  000041c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000018b0  00000000  00000000  00005155  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000005c0  00000000  00000000  00006a08  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000af0  00000000  00000000  00006fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002363  00000000  00000000  00007ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001d0  00000000  00000000  00009e1b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__ctors_end>
       4:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
       8:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
       c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      10:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      14:	0c 94 e6 04 	jmp	0x9cc	; 0x9cc <__vector_5>
      18:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      1c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      20:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      24:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      28:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      2c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      30:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      34:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      38:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      3c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      40:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      44:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      48:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      4c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      50:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      54:	07 63       	ori	r16, 0x37	; 55
      56:	42 36       	cpi	r20, 0x62	; 98
      58:	b7 9b       	sbis	0x16, 7	; 22
      5a:	d8 a7       	std	Y+40, r29	; 0x28
      5c:	1a 39       	cpi	r17, 0x9A	; 154
      5e:	68 56       	subi	r22, 0x68	; 104
      60:	18 ae       	std	Y+56, r1	; 0x38
      62:	ba ab       	std	Y+50, r27	; 0x32
      64:	55 8c       	ldd	r5, Z+29	; 0x1d
      66:	1d 3c       	cpi	r17, 0xCD	; 205
      68:	b7 cc       	rjmp	.-1682   	; 0xfffff9d8 <__eeprom_end+0xff7ef9d8>
      6a:	57 63       	ori	r21, 0x37	; 55
      6c:	bd 6d       	ori	r27, 0xDD	; 221
      6e:	ed fd       	.word	0xfded	; ????
      70:	75 3e       	cpi	r23, 0xE5	; 229
      72:	f6 17       	cp	r31, r22
      74:	72 31       	cpi	r23, 0x12	; 18
      76:	bf 00       	.word	0x00bf	; ????
      78:	00 00       	nop
      7a:	80 3f       	cpi	r24, 0xF0	; 240
      7c:	08 00       	.word	0x0008	; ????
      7e:	00 00       	nop
      80:	be 92       	st	-X, r11
      82:	24 49       	sbci	r18, 0x94	; 148
      84:	12 3e       	cpi	r17, 0xE2	; 226
      86:	ab aa       	std	Y+51, r10	; 0x33
      88:	aa 2a       	or	r10, r26
      8a:	be cd       	rjmp	.-1156   	; 0xfffffc08 <__eeprom_end+0xff7efc08>
      8c:	cc cc       	rjmp	.-1640   	; 0xfffffa26 <__eeprom_end+0xff7efa26>
      8e:	4c 3e       	cpi	r20, 0xEC	; 236
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	be ab       	std	Y+54, r27	; 0x36
      96:	aa aa       	std	Y+50, r10	; 0x32
      98:	aa 3e       	cpi	r26, 0xEA	; 234
      9a:	00 00       	nop
      9c:	00 00       	nop
      9e:	bf 00       	.word	0x00bf	; ????
      a0:	00 00       	nop
      a2:	80 3f       	cpi	r24, 0xF0	; 240
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	00 08       	sbc	r0, r0
      aa:	41 78       	andi	r20, 0x81	; 129
      ac:	d3 bb       	out	0x13, r29	; 19
      ae:	43 87       	std	Z+11, r20	; 0x0b
      b0:	d1 13       	cpse	r29, r17
      b2:	3d 19       	sub	r19, r13
      b4:	0e 3c       	cpi	r16, 0xCE	; 206
      b6:	c3 bd       	out	0x23, r28	; 35
      b8:	42 82       	std	Z+2, r4	; 0x02
      ba:	ad 2b       	or	r26, r29
      bc:	3e 68       	ori	r19, 0x8E	; 142
      be:	ec 82       	std	Y+4, r14	; 0x04
      c0:	76 be       	out	0x36, r7	; 54
      c2:	d9 8f       	std	Y+25, r29	; 0x19
      c4:	e1 a9       	ldd	r30, Z+49	; 0x31
      c6:	3e 4c       	sbci	r19, 0xCE	; 206
      c8:	80 ef       	ldi	r24, 0xF0	; 240
      ca:	ff be       	out	0x3f, r15	; 63
      cc:	01 c4       	rjmp	.+2050   	; 0x8d0 <__stack+0x71>
      ce:	ff 7f       	andi	r31, 0xFF	; 255
      d0:	3f 00       	.word	0x003f	; ????
      d2:	00 00       	nop
	...

000000d6 <__ctors_end>:
      d6:	11 24       	eor	r1, r1
      d8:	1f be       	out	0x3f, r1	; 63
      da:	cf e5       	ldi	r28, 0x5F	; 95
      dc:	d8 e0       	ldi	r29, 0x08	; 8
      de:	de bf       	out	0x3e, r29	; 62
      e0:	cd bf       	out	0x3d, r28	; 61

000000e2 <__do_copy_data>:
      e2:	10 e0       	ldi	r17, 0x00	; 0
      e4:	a0 e6       	ldi	r26, 0x60	; 96
      e6:	b0 e0       	ldi	r27, 0x00	; 0
      e8:	ea e5       	ldi	r30, 0x5A	; 90
      ea:	f3 e1       	ldi	r31, 0x13	; 19
      ec:	02 c0       	rjmp	.+4      	; 0xf2 <__do_copy_data+0x10>
      ee:	05 90       	lpm	r0, Z+
      f0:	0d 92       	st	X+, r0
      f2:	ac 3b       	cpi	r26, 0xBC	; 188
      f4:	b1 07       	cpc	r27, r17
      f6:	d9 f7       	brne	.-10     	; 0xee <__do_copy_data+0xc>

000000f8 <__do_clear_bss>:
      f8:	20 e0       	ldi	r18, 0x00	; 0
      fa:	ac eb       	ldi	r26, 0xBC	; 188
      fc:	b0 e0       	ldi	r27, 0x00	; 0
      fe:	01 c0       	rjmp	.+2      	; 0x102 <.do_clear_bss_start>

00000100 <.do_clear_bss_loop>:
     100:	1d 92       	st	X+, r1

00000102 <.do_clear_bss_start>:
     102:	ac 3b       	cpi	r26, 0xBC	; 188
     104:	b2 07       	cpc	r27, r18
     106:	e1 f7       	brne	.-8      	; 0x100 <.do_clear_bss_loop>
     108:	0e 94 10 02 	call	0x420	; 0x420 <main>
     10c:	0c 94 ab 09 	jmp	0x1356	; 0x1356 <_exit>

00000110 <__bad_interrupt>:
     110:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000114 <EEPROM_Read>:
	
}
/******************************************************************************************************************************************/
/**DESCRIPTION:-
 This Function is used To Read Data On External EEPROM Using I2C Communication*/
void EEPROM_Read ( uint8_t *data) {
     114:	cf 93       	push	r28
     116:	df 93       	push	r29
     118:	ec 01       	movw	r28, r24

	if(I2C_start()==EVENT_OK){															//Send a Starting Bit and Wait For ACK
     11a:	0e 94 23 05 	call	0xa46	; 0xa46 <I2C_start>
     11e:	81 11       	cpse	r24, r1
     120:	0e c0       	rjmp	.+28     	; 0x13e <EEPROM_Read+0x2a>
		if(I2C_addressEvent(0xa0,READ)==AD_R_SENT_ACK_OK){								//Send an Initializer "0b1010" Specified In the Data Sheet  and an Event Type "R/W" and Wait For ACK
     122:	61 e0       	ldi	r22, 0x01	; 1
     124:	80 ea       	ldi	r24, 0xA0	; 160
     126:	0e 94 36 05 	call	0xa6c	; 0xa6c <I2C_addressEvent>
     12a:	86 30       	cpi	r24, 0x06	; 6
     12c:	41 f4       	brne	.+16     	; 0x13e <EEPROM_Read+0x2a>
			if(I2C_receiveData(data,NACK)== DATA_RECIEVE_NACK_OK){						//Send an Address In the EEPROM  To Start Reading From It		
     12e:	61 e0       	ldi	r22, 0x01	; 1
     130:	ce 01       	movw	r24, r28
     132:	0e 94 7d 05 	call	0xafa	; 0xafa <I2C_receiveData>
     136:	8d 30       	cpi	r24, 0x0D	; 13
     138:	11 f4       	brne	.+4      	; 0x13e <EEPROM_Read+0x2a>
				I2C_stop();
     13a:	0e 94 6d 05 	call	0xada	; 0xada <I2C_stop>
			}
			
		}
	}
	
}
     13e:	df 91       	pop	r29
     140:	cf 91       	pop	r28
     142:	08 95       	ret

00000144 <EEPROM_Read_String>:
/**********************************************************************************************************************************************/
void EEPROM_Read_String(uint8_t * a_STR){
     144:	cf 92       	push	r12
     146:	df 92       	push	r13
     148:	ef 92       	push	r14
     14a:	ff 92       	push	r15
     14c:	0f 93       	push	r16
     14e:	1f 93       	push	r17
     150:	cf 93       	push	r28
     152:	df 93       	push	r29
     154:	7c 01       	movw	r14, r24
     156:	ec 01       	movw	r28, r24
     158:	8c 01       	movw	r16, r24
     15a:	00 5f       	subi	r16, 0xF0	; 240
     15c:	1f 4f       	sbci	r17, 0xFF	; 255
	uint8_t LV_Index_I=0;

	for (LV_Index_I=0;LV_Index_I<16;LV_Index_I++)
	{
		EEPROM_Read(&a_STR[LV_Index_I]);
     15e:	6e 01       	movw	r12, r28
     160:	ce 01       	movw	r24, r28
     162:	0e 94 8a 00 	call	0x114	; 0x114 <EEPROM_Read>
     166:	21 96       	adiw	r28, 0x01	; 1
		
		LCD_Write_Number((uint32_t)a_STR[LV_Index_I]);
     168:	f6 01       	movw	r30, r12
     16a:	60 81       	ld	r22, Z
     16c:	70 e0       	ldi	r23, 0x00	; 0
     16e:	80 e0       	ldi	r24, 0x00	; 0
     170:	90 e0       	ldi	r25, 0x00	; 0
     172:	0e 94 ae 01 	call	0x35c	; 0x35c <LCD_Write_Number>
}
/**********************************************************************************************************************************************/
void EEPROM_Read_String(uint8_t * a_STR){
	uint8_t LV_Index_I=0;

	for (LV_Index_I=0;LV_Index_I<16;LV_Index_I++)
     176:	c0 17       	cp	r28, r16
     178:	d1 07       	cpc	r29, r17
     17a:	89 f7       	brne	.-30     	; 0x15e <EEPROM_Read_String+0x1a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     17c:	ff ef       	ldi	r31, 0xFF	; 255
     17e:	20 e7       	ldi	r18, 0x70	; 112
     180:	82 e0       	ldi	r24, 0x02	; 2
     182:	f1 50       	subi	r31, 0x01	; 1
     184:	20 40       	sbci	r18, 0x00	; 0
     186:	80 40       	sbci	r24, 0x00	; 0
     188:	e1 f7       	brne	.-8      	; 0x182 <EEPROM_Read_String+0x3e>
     18a:	00 c0       	rjmp	.+0      	; 0x18c <EEPROM_Read_String+0x48>
     18c:	00 00       	nop
		LCD_Write_Number((uint32_t)a_STR[LV_Index_I]);
	}
	LV_Index_I=16;
	_delay_ms(100);

LCD_GoTo(2,0);
     18e:	60 e0       	ldi	r22, 0x00	; 0
     190:	82 e0       	ldi	r24, 0x02	; 2
     192:	0e 94 02 02 	call	0x404	; 0x404 <LCD_GoTo>
     196:	94 e1       	ldi	r25, 0x14	; 20
     198:	e9 0e       	add	r14, r25
     19a:	f1 1c       	adc	r15, r1
if (LV_Index_I>=15)
{

	for (LV_Index_I=16;LV_Index_I<20;LV_Index_I++)
	{
		EEPROM_Read(&a_STR[LV_Index_I]);
     19c:	e8 01       	movw	r28, r16
     19e:	c8 01       	movw	r24, r16
     1a0:	0e 94 8a 00 	call	0x114	; 0x114 <EEPROM_Read>
     1a4:	0f 5f       	subi	r16, 0xFF	; 255
     1a6:	1f 4f       	sbci	r17, 0xFF	; 255
		LCD_Write_Number((uint32_t)a_STR[LV_Index_I]);
     1a8:	68 81       	ld	r22, Y
     1aa:	70 e0       	ldi	r23, 0x00	; 0
     1ac:	80 e0       	ldi	r24, 0x00	; 0
     1ae:	90 e0       	ldi	r25, 0x00	; 0
     1b0:	0e 94 ae 01 	call	0x35c	; 0x35c <LCD_Write_Number>

LCD_GoTo(2,0);
if (LV_Index_I>=15)
{

	for (LV_Index_I=16;LV_Index_I<20;LV_Index_I++)
     1b4:	0e 15       	cp	r16, r14
     1b6:	1f 05       	cpc	r17, r15
     1b8:	89 f7       	brne	.-30     	; 0x19c <EEPROM_Read_String+0x58>
		EEPROM_Read(&a_STR[LV_Index_I]);
		LCD_Write_Number((uint32_t)a_STR[LV_Index_I]);
	}
}

}
     1ba:	df 91       	pop	r29
     1bc:	cf 91       	pop	r28
     1be:	1f 91       	pop	r17
     1c0:	0f 91       	pop	r16
     1c2:	ff 90       	pop	r15
     1c4:	ef 90       	pop	r14
     1c6:	df 90       	pop	r13
     1c8:	cf 90       	pop	r12
     1ca:	08 95       	ret

000001cc <LCD_WRITE_COMMAND>:
/**DESCRIPTION:-
  This Function Clears The LCD
  **/
void LCD_Clear(void)
{
	LCD_WRITE_COMMAND(0x01);
     1cc:	cf 93       	push	r28
     1ce:	c8 2f       	mov	r28, r24
     1d0:	60 e0       	ldi	r22, 0x00	; 0
     1d2:	81 e0       	ldi	r24, 0x01	; 1
     1d4:	0e 94 17 04 	call	0x82e	; 0x82e <DIO_WRITEPIN>
     1d8:	60 e0       	ldi	r22, 0x00	; 0
     1da:	82 e0       	ldi	r24, 0x02	; 2
     1dc:	0e 94 17 04 	call	0x82e	; 0x82e <DIO_WRITEPIN>
     1e0:	c4 fb       	bst	r28, 4
     1e2:	66 27       	eor	r22, r22
     1e4:	60 f9       	bld	r22, 0
     1e6:	84 e1       	ldi	r24, 0x14	; 20
     1e8:	0e 94 17 04 	call	0x82e	; 0x82e <DIO_WRITEPIN>
     1ec:	c5 fb       	bst	r28, 5
     1ee:	66 27       	eor	r22, r22
     1f0:	60 f9       	bld	r22, 0
     1f2:	85 e1       	ldi	r24, 0x15	; 21
     1f4:	0e 94 17 04 	call	0x82e	; 0x82e <DIO_WRITEPIN>
     1f8:	c6 fb       	bst	r28, 6
     1fa:	66 27       	eor	r22, r22
     1fc:	60 f9       	bld	r22, 0
     1fe:	86 e1       	ldi	r24, 0x16	; 22
     200:	0e 94 17 04 	call	0x82e	; 0x82e <DIO_WRITEPIN>
     204:	6c 2f       	mov	r22, r28
     206:	66 1f       	adc	r22, r22
     208:	66 27       	eor	r22, r22
     20a:	66 1f       	adc	r22, r22
     20c:	87 e1       	ldi	r24, 0x17	; 23
     20e:	0e 94 17 04 	call	0x82e	; 0x82e <DIO_WRITEPIN>
     212:	61 e0       	ldi	r22, 0x01	; 1
     214:	83 e0       	ldi	r24, 0x03	; 3
     216:	0e 94 17 04 	call	0x82e	; 0x82e <DIO_WRITEPIN>
     21a:	89 ef       	ldi	r24, 0xF9	; 249
     21c:	90 e0       	ldi	r25, 0x00	; 0
     21e:	01 97       	sbiw	r24, 0x01	; 1
     220:	f1 f7       	brne	.-4      	; 0x21e <LCD_WRITE_COMMAND+0x52>
     222:	00 c0       	rjmp	.+0      	; 0x224 <LCD_WRITE_COMMAND+0x58>
     224:	00 00       	nop
     226:	60 e0       	ldi	r22, 0x00	; 0
     228:	83 e0       	ldi	r24, 0x03	; 3
     22a:	0e 94 17 04 	call	0x82e	; 0x82e <DIO_WRITEPIN>
     22e:	89 ef       	ldi	r24, 0xF9	; 249
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	01 97       	sbiw	r24, 0x01	; 1
     234:	f1 f7       	brne	.-4      	; 0x232 <LCD_WRITE_COMMAND+0x66>
     236:	00 c0       	rjmp	.+0      	; 0x238 <LCD_WRITE_COMMAND+0x6c>
     238:	00 00       	nop
     23a:	6c 2f       	mov	r22, r28
     23c:	61 70       	andi	r22, 0x01	; 1
     23e:	84 e1       	ldi	r24, 0x14	; 20
     240:	0e 94 17 04 	call	0x82e	; 0x82e <DIO_WRITEPIN>
     244:	c1 fb       	bst	r28, 1
     246:	66 27       	eor	r22, r22
     248:	60 f9       	bld	r22, 0
     24a:	85 e1       	ldi	r24, 0x15	; 21
     24c:	0e 94 17 04 	call	0x82e	; 0x82e <DIO_WRITEPIN>
     250:	c2 fb       	bst	r28, 2
     252:	66 27       	eor	r22, r22
     254:	60 f9       	bld	r22, 0
     256:	86 e1       	ldi	r24, 0x16	; 22
     258:	0e 94 17 04 	call	0x82e	; 0x82e <DIO_WRITEPIN>
     25c:	c3 fb       	bst	r28, 3
     25e:	66 27       	eor	r22, r22
     260:	60 f9       	bld	r22, 0
     262:	87 e1       	ldi	r24, 0x17	; 23
     264:	0e 94 17 04 	call	0x82e	; 0x82e <DIO_WRITEPIN>
     268:	61 e0       	ldi	r22, 0x01	; 1
     26a:	83 e0       	ldi	r24, 0x03	; 3
     26c:	0e 94 17 04 	call	0x82e	; 0x82e <DIO_WRITEPIN>
     270:	89 ef       	ldi	r24, 0xF9	; 249
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	01 97       	sbiw	r24, 0x01	; 1
     276:	f1 f7       	brne	.-4      	; 0x274 <LCD_WRITE_COMMAND+0xa8>
     278:	00 c0       	rjmp	.+0      	; 0x27a <LCD_WRITE_COMMAND+0xae>
     27a:	00 00       	nop
     27c:	60 e0       	ldi	r22, 0x00	; 0
     27e:	83 e0       	ldi	r24, 0x03	; 3
     280:	0e 94 17 04 	call	0x82e	; 0x82e <DIO_WRITEPIN>
     284:	89 ef       	ldi	r24, 0xF9	; 249
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	01 97       	sbiw	r24, 0x01	; 1
     28a:	f1 f7       	brne	.-4      	; 0x288 <LCD_WRITE_COMMAND+0xbc>
     28c:	00 c0       	rjmp	.+0      	; 0x28e <LCD_WRITE_COMMAND+0xc2>
     28e:	00 00       	nop
     290:	cf 91       	pop	r28
     292:	08 95       	ret

00000294 <LCD_WRITE_DATA>:
     294:	cf 93       	push	r28
     296:	c8 2f       	mov	r28, r24
     298:	61 e0       	ldi	r22, 0x01	; 1
     29a:	81 e0       	ldi	r24, 0x01	; 1
     29c:	0e 94 17 04 	call	0x82e	; 0x82e <DIO_WRITEPIN>
     2a0:	60 e0       	ldi	r22, 0x00	; 0
     2a2:	82 e0       	ldi	r24, 0x02	; 2
     2a4:	0e 94 17 04 	call	0x82e	; 0x82e <DIO_WRITEPIN>
     2a8:	c4 fb       	bst	r28, 4
     2aa:	66 27       	eor	r22, r22
     2ac:	60 f9       	bld	r22, 0
     2ae:	84 e1       	ldi	r24, 0x14	; 20
     2b0:	0e 94 17 04 	call	0x82e	; 0x82e <DIO_WRITEPIN>
     2b4:	c5 fb       	bst	r28, 5
     2b6:	66 27       	eor	r22, r22
     2b8:	60 f9       	bld	r22, 0
     2ba:	85 e1       	ldi	r24, 0x15	; 21
     2bc:	0e 94 17 04 	call	0x82e	; 0x82e <DIO_WRITEPIN>
     2c0:	c6 fb       	bst	r28, 6
     2c2:	66 27       	eor	r22, r22
     2c4:	60 f9       	bld	r22, 0
     2c6:	86 e1       	ldi	r24, 0x16	; 22
     2c8:	0e 94 17 04 	call	0x82e	; 0x82e <DIO_WRITEPIN>
     2cc:	6c 2f       	mov	r22, r28
     2ce:	66 1f       	adc	r22, r22
     2d0:	66 27       	eor	r22, r22
     2d2:	66 1f       	adc	r22, r22
     2d4:	87 e1       	ldi	r24, 0x17	; 23
     2d6:	0e 94 17 04 	call	0x82e	; 0x82e <DIO_WRITEPIN>
     2da:	61 e0       	ldi	r22, 0x01	; 1
     2dc:	83 e0       	ldi	r24, 0x03	; 3
     2de:	0e 94 17 04 	call	0x82e	; 0x82e <DIO_WRITEPIN>
     2e2:	89 ef       	ldi	r24, 0xF9	; 249
     2e4:	90 e0       	ldi	r25, 0x00	; 0
     2e6:	01 97       	sbiw	r24, 0x01	; 1
     2e8:	f1 f7       	brne	.-4      	; 0x2e6 <LCD_WRITE_DATA+0x52>
     2ea:	00 c0       	rjmp	.+0      	; 0x2ec <LCD_WRITE_DATA+0x58>
     2ec:	00 00       	nop
     2ee:	60 e0       	ldi	r22, 0x00	; 0
     2f0:	83 e0       	ldi	r24, 0x03	; 3
     2f2:	0e 94 17 04 	call	0x82e	; 0x82e <DIO_WRITEPIN>
     2f6:	89 ef       	ldi	r24, 0xF9	; 249
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	01 97       	sbiw	r24, 0x01	; 1
     2fc:	f1 f7       	brne	.-4      	; 0x2fa <LCD_WRITE_DATA+0x66>
     2fe:	00 c0       	rjmp	.+0      	; 0x300 <LCD_WRITE_DATA+0x6c>
     300:	00 00       	nop
     302:	6c 2f       	mov	r22, r28
     304:	61 70       	andi	r22, 0x01	; 1
     306:	84 e1       	ldi	r24, 0x14	; 20
     308:	0e 94 17 04 	call	0x82e	; 0x82e <DIO_WRITEPIN>
     30c:	c1 fb       	bst	r28, 1
     30e:	66 27       	eor	r22, r22
     310:	60 f9       	bld	r22, 0
     312:	85 e1       	ldi	r24, 0x15	; 21
     314:	0e 94 17 04 	call	0x82e	; 0x82e <DIO_WRITEPIN>
     318:	c2 fb       	bst	r28, 2
     31a:	66 27       	eor	r22, r22
     31c:	60 f9       	bld	r22, 0
     31e:	86 e1       	ldi	r24, 0x16	; 22
     320:	0e 94 17 04 	call	0x82e	; 0x82e <DIO_WRITEPIN>
     324:	c3 fb       	bst	r28, 3
     326:	66 27       	eor	r22, r22
     328:	60 f9       	bld	r22, 0
     32a:	87 e1       	ldi	r24, 0x17	; 23
     32c:	0e 94 17 04 	call	0x82e	; 0x82e <DIO_WRITEPIN>
     330:	61 e0       	ldi	r22, 0x01	; 1
     332:	83 e0       	ldi	r24, 0x03	; 3
     334:	0e 94 17 04 	call	0x82e	; 0x82e <DIO_WRITEPIN>
     338:	89 ef       	ldi	r24, 0xF9	; 249
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	01 97       	sbiw	r24, 0x01	; 1
     33e:	f1 f7       	brne	.-4      	; 0x33c <LCD_WRITE_DATA+0xa8>
     340:	00 c0       	rjmp	.+0      	; 0x342 <LCD_WRITE_DATA+0xae>
     342:	00 00       	nop
     344:	60 e0       	ldi	r22, 0x00	; 0
     346:	83 e0       	ldi	r24, 0x03	; 3
     348:	0e 94 17 04 	call	0x82e	; 0x82e <DIO_WRITEPIN>
     34c:	89 ef       	ldi	r24, 0xF9	; 249
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	01 97       	sbiw	r24, 0x01	; 1
     352:	f1 f7       	brne	.-4      	; 0x350 <LCD_WRITE_DATA+0xbc>
     354:	00 c0       	rjmp	.+0      	; 0x356 <LCD_WRITE_DATA+0xc2>
     356:	00 00       	nop
     358:	cf 91       	pop	r28
     35a:	08 95       	ret

0000035c <LCD_Write_Number>:
     35c:	8f 92       	push	r8
     35e:	9f 92       	push	r9
     360:	af 92       	push	r10
     362:	bf 92       	push	r11
     364:	ef 92       	push	r14
     366:	ff 92       	push	r15
     368:	1f 93       	push	r17
     36a:	cf 93       	push	r28
     36c:	df 93       	push	r29
     36e:	cd b7       	in	r28, 0x3d	; 61
     370:	de b7       	in	r29, 0x3e	; 62
     372:	60 97       	sbiw	r28, 0x10	; 16
     374:	0f b6       	in	r0, 0x3f	; 63
     376:	f8 94       	cli
     378:	de bf       	out	0x3e, r29	; 62
     37a:	0f be       	out	0x3f, r0	; 63
     37c:	cd bf       	out	0x3d, r28	; 61
     37e:	61 15       	cp	r22, r1
     380:	71 05       	cpc	r23, r1
     382:	81 05       	cpc	r24, r1
     384:	91 05       	cpc	r25, r1
     386:	21 f4       	brne	.+8      	; 0x390 <LCD_Write_Number+0x34>
     388:	80 e3       	ldi	r24, 0x30	; 48
     38a:	0e 94 4a 01 	call	0x294	; 0x294 <LCD_WRITE_DATA>
     38e:	2a c0       	rjmp	.+84     	; 0x3e4 <LCD_Write_Number+0x88>
     390:	10 e0       	ldi	r17, 0x00	; 0
     392:	0f 2e       	mov	r0, r31
     394:	fa e0       	ldi	r31, 0x0A	; 10
     396:	8f 2e       	mov	r8, r31
     398:	91 2c       	mov	r9, r1
     39a:	a1 2c       	mov	r10, r1
     39c:	b1 2c       	mov	r11, r1
     39e:	f0 2d       	mov	r31, r0
     3a0:	ee 24       	eor	r14, r14
     3a2:	e3 94       	inc	r14
     3a4:	f1 2c       	mov	r15, r1
     3a6:	ec 0e       	add	r14, r28
     3a8:	fd 1e       	adc	r15, r29
     3aa:	e1 0e       	add	r14, r17
     3ac:	f1 1c       	adc	r15, r1
     3ae:	a5 01       	movw	r20, r10
     3b0:	94 01       	movw	r18, r8
     3b2:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__udivmodsi4>
     3b6:	60 5d       	subi	r22, 0xD0	; 208
     3b8:	f7 01       	movw	r30, r14
     3ba:	60 83       	st	Z, r22
     3bc:	1f 5f       	subi	r17, 0xFF	; 255
     3be:	62 2f       	mov	r22, r18
     3c0:	73 2f       	mov	r23, r19
     3c2:	84 2f       	mov	r24, r20
     3c4:	95 2f       	mov	r25, r21
     3c6:	61 15       	cp	r22, r1
     3c8:	71 05       	cpc	r23, r1
     3ca:	81 05       	cpc	r24, r1
     3cc:	91 05       	cpc	r25, r1
     3ce:	41 f7       	brne	.-48     	; 0x3a0 <LCD_Write_Number+0x44>
     3d0:	11 23       	and	r17, r17
     3d2:	41 f0       	breq	.+16     	; 0x3e4 <LCD_Write_Number+0x88>
     3d4:	fe 01       	movw	r30, r28
     3d6:	e1 0f       	add	r30, r17
     3d8:	f1 1d       	adc	r31, r1
     3da:	80 81       	ld	r24, Z
     3dc:	0e 94 4a 01 	call	0x294	; 0x294 <LCD_WRITE_DATA>
     3e0:	11 50       	subi	r17, 0x01	; 1
     3e2:	c1 f7       	brne	.-16     	; 0x3d4 <LCD_Write_Number+0x78>
     3e4:	60 96       	adiw	r28, 0x10	; 16
     3e6:	0f b6       	in	r0, 0x3f	; 63
     3e8:	f8 94       	cli
     3ea:	de bf       	out	0x3e, r29	; 62
     3ec:	0f be       	out	0x3f, r0	; 63
     3ee:	cd bf       	out	0x3d, r28	; 61
     3f0:	df 91       	pop	r29
     3f2:	cf 91       	pop	r28
     3f4:	1f 91       	pop	r17
     3f6:	ff 90       	pop	r15
     3f8:	ef 90       	pop	r14
     3fa:	bf 90       	pop	r11
     3fc:	af 90       	pop	r10
     3fe:	9f 90       	pop	r9
     400:	8f 90       	pop	r8
     402:	08 95       	ret

00000404 <LCD_GoTo>:
  This Function Takes a Specific Line and a Cell On The LCD and Displays the Data In That Location
  **/
void LCD_GoTo(uint8_t a_line,uint8_t a_cell)
{
//0x80 this is from data sheet to write an address on the DDRAM"screen"*/
	if (a_line==1)
     404:	81 30       	cpi	r24, 0x01	; 1
     406:	29 f4       	brne	.+10     	; 0x412 <LCD_GoTo+0xe>
	{
		LCD_WRITE_COMMAND(0x80+a_cell);    /*0x80 means we ant to write an address and a_cell is the address we want*/
     408:	80 e8       	ldi	r24, 0x80	; 128
     40a:	86 0f       	add	r24, r22
     40c:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LCD_WRITE_COMMAND>
     410:	08 95       	ret
	}
	else if (a_line==2)
     412:	82 30       	cpi	r24, 0x02	; 2
     414:	21 f4       	brne	.+8      	; 0x41e <LCD_GoTo+0x1a>
	{
		LCD_WRITE_COMMAND(0x80+0x40+a_cell);  /*0x40 to start from cell 0 at line 2 from the data sheet*/	
     416:	80 ec       	ldi	r24, 0xC0	; 192
     418:	86 0f       	add	r24, r22
     41a:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LCD_WRITE_COMMAND>
     41e:	08 95       	ret

00000420 <main>:
#include "application/app.h"
#include <util/delay.h>
//#define F_CPU   1000000u

int main(void)
{
     420:	3f 92       	push	r3
     422:	4f 92       	push	r4
     424:	5f 92       	push	r5
     426:	6f 92       	push	r6
     428:	7f 92       	push	r7
     42a:	8f 92       	push	r8
     42c:	9f 92       	push	r9
     42e:	af 92       	push	r10
     430:	bf 92       	push	r11
     432:	cf 92       	push	r12
     434:	df 92       	push	r13
     436:	ef 92       	push	r14
     438:	ff 92       	push	r15
     43a:	0f 93       	push	r16
     43c:	1f 93       	push	r17
     43e:	cf 93       	push	r28
     440:	df 93       	push	r29
     442:	cd b7       	in	r28, 0x3d	; 61
     444:	de b7       	in	r29, 0x3e	; 62
     446:	e0 97       	sbiw	r28, 0x30	; 48
     448:	0f b6       	in	r0, 0x3f	; 63
     44a:	f8 94       	cli
     44c:	de bf       	out	0x3e, r29	; 62
     44e:	0f be       	out	0x3f, r0	; 63
     450:	cd bf       	out	0x3d, r28	; 61
	// Programming mode
	DIO_INITPIN(pinb0,OUTPUT);
     452:	60 e0       	ldi	r22, 0x00	; 0
     454:	88 e0       	ldi	r24, 0x08	; 8
     456:	0e 94 15 03 	call	0x62a	; 0x62a <DIO_INITPIN>
	DIO_WRITEPIN(pinb0,HIGH);
     45a:	61 e0       	ldi	r22, 0x01	; 1
     45c:	88 e0       	ldi	r24, 0x08	; 8
     45e:	0e 94 17 04 	call	0x82e	; 0x82e <DIO_WRITEPIN>
	uint8_t ad=0x00,ad2=0x10,str1[16]={0},ad3=0b1010000,ad4=0b1010001;
     462:	68 94       	set
     464:	ff 24       	eor	r15, r15
     466:	f4 f8       	bld	r15, 4
     468:	fe 01       	movw	r30, r28
     46a:	31 96       	adiw	r30, 0x01	; 1
     46c:	df 01       	movw	r26, r30
     46e:	2f 2d       	mov	r18, r15
     470:	1d 92       	st	X+, r1
     472:	2a 95       	dec	r18
     474:	e9 f7       	brne	.-6      	; 0x470 <main+0x50>
	USART_init();
     476:	0e 94 a3 05 	call	0xb46	; 0xb46 <USART_init>
	I2C_init(I2C_PRESCALER_1);
     47a:	80 e0       	ldi	r24, 0x00	; 0
     47c:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <I2C_init>
	//******************************************************************************************************
	// PAN RECIEVE AND SEND
	unsigned char arr_pan[16]={0};
     480:	8e 01       	movw	r16, r28
     482:	0f 5e       	subi	r16, 0xEF	; 239
     484:	1f 4f       	sbci	r17, 0xFF	; 255
     486:	d8 01       	movw	r26, r16
     488:	1d 92       	st	X+, r1
     48a:	fa 94       	dec	r15
     48c:	e9 f7       	brne	.-6      	; 0x488 <main+0x68>
	USART_Transmit_string ("Please Enter Card PAN:");
     48e:	80 e6       	ldi	r24, 0x60	; 96
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	0e 94 b4 05 	call	0xb68	; 0xb68 <USART_Transmit_string>
	char *pan =  USART_receive_string(arr_pan);
     496:	c8 01       	movw	r24, r16
     498:	0e 94 ca 05 	call	0xb94	; 0xb94 <USART_receive_string>
     49c:	8c 01       	movw	r16, r24
	USART_transmit('\n');
     49e:	8a e0       	ldi	r24, 0x0A	; 10
     4a0:	90 e0       	ldi	r25, 0x00	; 0
     4a2:	0e 94 ac 05 	call	0xb58	; 0xb58 <USART_transmit>
     4a6:	f8 01       	movw	r30, r16
     4a8:	98 01       	movw	r18, r16
     4aa:	20 5f       	subi	r18, 0xF0	; 240
     4ac:	3f 4f       	sbci	r19, 0xFF	; 255
	for (int i=0;i<16;i++)
	{
		pan[i]=pan[i]-'30';
     4ae:	90 81       	ld	r25, Z
     4b0:	90 53       	subi	r25, 0x30	; 48
     4b2:	91 93       	st	Z+, r25
	// PAN RECIEVE AND SEND
	unsigned char arr_pan[16]={0};
	USART_Transmit_string ("Please Enter Card PAN:");
	char *pan =  USART_receive_string(arr_pan);
	USART_transmit('\n');
	for (int i=0;i<16;i++)
     4b4:	2e 17       	cp	r18, r30
     4b6:	3f 07       	cpc	r19, r31
     4b8:	d1 f7       	brne	.-12     	; 0x4ae <main+0x8e>
     4ba:	bf ef       	ldi	r27, 0xFF	; 255
     4bc:	e0 e7       	ldi	r30, 0x70	; 112
     4be:	f2 e0       	ldi	r31, 0x02	; 2
     4c0:	b1 50       	subi	r27, 0x01	; 1
     4c2:	e0 40       	sbci	r30, 0x00	; 0
     4c4:	f0 40       	sbci	r31, 0x00	; 0
     4c6:	e1 f7       	brne	.-8      	; 0x4c0 <main+0xa0>
     4c8:	00 c0       	rjmp	.+0      	; 0x4ca <main+0xaa>
     4ca:	00 00       	nop
	}
	//EEPROM_Write_WithSize(pan,&ad,16);
   _delay_ms(100);
	//*********************************************************************************************************
	// PIN RECIEVE AND SEND
	uint8_t pinRecieved='0';
     4cc:	10 e3       	ldi	r17, 0x30	; 48
	char *pin;
	while (pinRecieved=='0')
	{
	// PIN RECIEVE 
	unsigned char arr_pin[7]={0};
     4ce:	0f 2e       	mov	r0, r31
     4d0:	f7 e0       	ldi	r31, 0x07	; 7
     4d2:	5f 2e       	mov	r5, r31
     4d4:	f0 2d       	mov	r31, r0
     4d6:	5e 01       	movw	r10, r28
     4d8:	28 e2       	ldi	r18, 0x28	; 40
     4da:	a2 0e       	add	r10, r18
     4dc:	b1 1c       	adc	r11, r1
	unsigned char arr_npin[7]={0};
     4de:	3e 01       	movw	r6, r28
     4e0:	81 e2       	ldi	r24, 0x21	; 33
     4e2:	68 0e       	add	r6, r24
     4e4:	71 1c       	adc	r7, r1
     4e6:	4e 01       	movw	r8, r28
     4e8:	9c e2       	ldi	r25, 0x2C	; 44
     4ea:	89 0e       	add	r8, r25
     4ec:	91 1c       	adc	r9, r1
	uint8_t pinRecieved='0';
	char *pin;
	while (pinRecieved=='0')
	{
	// PIN RECIEVE 
	unsigned char arr_pin[7]={0};
     4ee:	d5 01       	movw	r26, r10
     4f0:	e5 2d       	mov	r30, r5
     4f2:	1d 92       	st	X+, r1
     4f4:	ea 95       	dec	r30
     4f6:	e9 f7       	brne	.-6      	; 0x4f2 <main+0xd2>
	unsigned char arr_npin[7]={0};
     4f8:	d3 01       	movw	r26, r6
     4fa:	e5 2d       	mov	r30, r5
     4fc:	1d 92       	st	X+, r1
     4fe:	ea 95       	dec	r30
     500:	e9 f7       	brne	.-6      	; 0x4fc <main+0xdc>
	USART_Transmit_string ("Please Enter New PIN:");
     502:	87 e7       	ldi	r24, 0x77	; 119
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	0e 94 b4 05 	call	0xb68	; 0xb68 <USART_Transmit_string>
	pin =  USART_receive_string(arr_pin);
     50a:	c5 01       	movw	r24, r10
     50c:	0e 94 ca 05 	call	0xb94	; 0xb94 <USART_receive_string>
     510:	98 ab       	std	Y+48, r25	; 0x30
     512:	8f a7       	std	Y+47, r24	; 0x2f
     514:	6c 01       	movw	r12, r24
	//**************************************************
	// CONFIRM PIN RECIEVE
	USART_Transmit_string ("Please Confirm New PIN:");
     516:	8d e8       	ldi	r24, 0x8D	; 141
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	0e 94 b4 05 	call	0xb68	; 0xb68 <USART_Transmit_string>
	char *new_pin = USART_receive_string(arr_npin);
     51e:	c3 01       	movw	r24, r6
     520:	0e 94 ca 05 	call	0xb94	; 0xb94 <USART_receive_string>
     524:	38 2e       	mov	r3, r24
     526:	49 2e       	mov	r4, r25
   //***********************************************
   // CHECK PIN CONDITION
	if (arr_pin[4] == 0 && arr_pin[3]!= 0) 
     528:	8c a5       	ldd	r24, Y+44	; 0x2c
     52a:	81 11       	cpse	r24, r1
     52c:	16 c0       	rjmp	.+44     	; 0x55a <main+0x13a>
     52e:	8b a5       	ldd	r24, Y+43	; 0x2b
     530:	88 23       	and	r24, r24
     532:	99 f0       	breq	.+38     	; 0x55a <main+0x13a>
     534:	7e 01       	movw	r14, r28
     536:	f8 e2       	ldi	r31, 0x28	; 40
     538:	ef 0e       	add	r14, r31
     53a:	f1 1c       	adc	r15, r1
     53c:	11 e3       	ldi	r17, 0x31	; 49
	{
	 pinRecieved='1';
	 	 for (int y=0;y<4;y++)
	 	 {
		 	 if (arr_pin[y]<48 || arr_pin[y]>57) 
     53e:	d7 01       	movw	r26, r14
     540:	8d 91       	ld	r24, X+
     542:	7d 01       	movw	r14, r26
     544:	80 53       	subi	r24, 0x30	; 48
     546:	8a 30       	cpi	r24, 0x0A	; 10
     548:	28 f0       	brcs	.+10     	; 0x554 <main+0x134>
			  {
				  USART_transmit('\n');  
     54a:	8a e0       	ldi	r24, 0x0A	; 10
     54c:	90 e0       	ldi	r25, 0x00	; 0
     54e:	0e 94 ac 05 	call	0xb58	; 0xb58 <USART_transmit>
				  pinRecieved='0'; 
     552:	10 e3       	ldi	r17, 0x30	; 48
   //***********************************************
   // CHECK PIN CONDITION
	if (arr_pin[4] == 0 && arr_pin[3]!= 0) 
	{
	 pinRecieved='1';
	 	 for (int y=0;y<4;y++)
     554:	8e 14       	cp	r8, r14
     556:	9f 04       	cpc	r9, r15
     558:	91 f7       	brne	.-28     	; 0x53e <main+0x11e>
     55a:	a3 2d       	mov	r26, r3
     55c:	b4 2d       	mov	r27, r4
     55e:	ef a5       	ldd	r30, Y+47	; 0x2f
     560:	f8 a9       	ldd	r31, Y+48	; 0x30
     562:	9f 01       	movw	r18, r30
     564:	2c 5f       	subi	r18, 0xFC	; 252
     566:	3f 4f       	sbci	r19, 0xFF	; 255
		uint8_t npin = *(new_pin);
		uint8_t pin_in = *(pin);
		int c=0;
		for (c=0;c<4;c++)
		{
			if ((*(new_pin+c)) != (*(pin+c)) ) 
     568:	9d 91       	ld	r25, X+
     56a:	81 91       	ld	r24, Z+
     56c:	98 13       	cpse	r25, r24
			{ 
				pinRecieved='0';
     56e:	10 e3       	ldi	r17, 0x30	; 48
	//**************************************************************
	// CHECK PIN CONFIRMATION
		uint8_t npin = *(new_pin);
		uint8_t pin_in = *(pin);
		int c=0;
		for (c=0;c<4;c++)
     570:	e2 17       	cp	r30, r18
     572:	f3 07       	cpc	r31, r19
     574:	c9 f7       	brne	.-14     	; 0x568 <main+0x148>
			if ((*(new_pin+c)) != (*(pin+c)) ) 
			{ 
				pinRecieved='0';
			}
		}
		if (pinRecieved=='0') USART_Transmit_string ("Wrong PIN "); 	 
     576:	10 33       	cpi	r17, 0x30	; 48
     578:	61 f4       	brne	.+24     	; 0x592 <main+0x172>
     57a:	85 ea       	ldi	r24, 0xA5	; 165
     57c:	90 e0       	ldi	r25, 0x00	; 0
     57e:	0e 94 b4 05 	call	0xb68	; 0xb68 <USART_Transmit_string>
     582:	b5 cf       	rjmp	.-150    	; 0x4ee <main+0xce>
	}
	USART_Transmit_string (" finished ");

		for (int i=0;i<4;i++)
		{
			pin[i]=pin[i]-'30';
     584:	80 81       	ld	r24, Z
     586:	80 53       	subi	r24, 0x30	; 48
     588:	81 93       	st	Z+, r24
		}
		if (pinRecieved=='0') USART_Transmit_string ("Wrong PIN "); 	 
	}
	USART_Transmit_string (" finished ");

		for (int i=0;i<4;i++)
     58a:	ce 16       	cp	r12, r30
     58c:	df 06       	cpc	r13, r31
     58e:	d1 f7       	brne	.-12     	; 0x584 <main+0x164>
     590:	0a c0       	rjmp	.+20     	; 0x5a6 <main+0x186>
				pinRecieved='0';
			}
		}
		if (pinRecieved=='0') USART_Transmit_string ("Wrong PIN "); 	 
	}
	USART_Transmit_string (" finished ");
     592:	80 eb       	ldi	r24, 0xB0	; 176
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	0e 94 b4 05 	call	0xb68	; 0xb68 <USART_Transmit_string>
     59a:	ef a5       	ldd	r30, Y+47	; 0x2f
     59c:	f8 a9       	ldd	r31, Y+48	; 0x30
     59e:	24 e0       	ldi	r18, 0x04	; 4
     5a0:	c2 0e       	add	r12, r18
     5a2:	d1 1c       	adc	r13, r1
     5a4:	ef cf       	rjmp	.-34     	; 0x584 <main+0x164>
     5a6:	bf ef       	ldi	r27, 0xFF	; 255
     5a8:	e0 e7       	ldi	r30, 0x70	; 112
     5aa:	f2 e0       	ldi	r31, 0x02	; 2
     5ac:	b1 50       	subi	r27, 0x01	; 1
     5ae:	e0 40       	sbci	r30, 0x00	; 0
     5b0:	f0 40       	sbci	r31, 0x00	; 0
     5b2:	e1 f7       	brne	.-8      	; 0x5ac <main+0x18c>
     5b4:	00 c0       	rjmp	.+0      	; 0x5b6 <main+0x196>
     5b6:	00 00       	nop
		}
		//EEPROM_Write_WithSize(pin,&ad2,4);// Need No size init // SEND D0 at further input // write PAN to EEPROM
		_delay_ms(100);
		
// user mode
DIO_WRITEPIN(pinb0,LOW);
     5b8:	60 e0       	ldi	r22, 0x00	; 0
     5ba:	88 e0       	ldi	r24, 0x08	; 8
     5bc:	0e 94 17 04 	call	0x82e	; 0x82e <DIO_WRITEPIN>
DIO_WRITEPIN(pinc0,LOW);
     5c0:	60 e0       	ldi	r22, 0x00	; 0
     5c2:	80 e1       	ldi	r24, 0x10	; 16
     5c4:	0e 94 17 04 	call	0x82e	; 0x82e <DIO_WRITEPIN>
DIO_WRITEPIN(pinc1,LOW);
     5c8:	60 e0       	ldi	r22, 0x00	; 0
     5ca:	81 e1       	ldi	r24, 0x11	; 17
     5cc:	0e 94 17 04 	call	0x82e	; 0x82e <DIO_WRITEPIN>
USART_init();
     5d0:	0e 94 a3 05 	call	0xb46	; 0xb46 <USART_init>
I2C_init(I2C_PRESCALER_1);
     5d4:	80 e0       	ldi	r24, 0x00	; 0
     5d6:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <I2C_init>
SPI_master_init();
     5da:	0e 94 b4 04 	call	0x968	; 0x968 <SPI_master_init>
//********************************************/	
EEPROM_Read_String(str1);	
     5de:	ce 01       	movw	r24, r28
     5e0:	01 96       	adiw	r24, 0x01	; 1
     5e2:	0e 94 a2 00 	call	0x144	; 0x144 <EEPROM_Read_String>
USART_Transmit_string(str1);
     5e6:	ce 01       	movw	r24, r28
     5e8:	01 96       	adiw	r24, 0x01	; 1
     5ea:	0e 94 b4 05 	call	0xb68	; 0xb68 <USART_Transmit_string>
SPI_transmit_string(str1);
     5ee:	ce 01       	movw	r24, r28
     5f0:	01 96       	adiw	r24, 0x01	; 1
     5f2:	0e 94 cf 04 	call	0x99e	; 0x99e <SPI_transmit_string>

//*******************************************			
}
     5f6:	80 e0       	ldi	r24, 0x00	; 0
     5f8:	90 e0       	ldi	r25, 0x00	; 0
     5fa:	e0 96       	adiw	r28, 0x30	; 48
     5fc:	0f b6       	in	r0, 0x3f	; 63
     5fe:	f8 94       	cli
     600:	de bf       	out	0x3e, r29	; 62
     602:	0f be       	out	0x3f, r0	; 63
     604:	cd bf       	out	0x3d, r28	; 61
     606:	df 91       	pop	r29
     608:	cf 91       	pop	r28
     60a:	1f 91       	pop	r17
     60c:	0f 91       	pop	r16
     60e:	ff 90       	pop	r15
     610:	ef 90       	pop	r14
     612:	df 90       	pop	r13
     614:	cf 90       	pop	r12
     616:	bf 90       	pop	r11
     618:	af 90       	pop	r10
     61a:	9f 90       	pop	r9
     61c:	8f 90       	pop	r8
     61e:	7f 90       	pop	r7
     620:	6f 90       	pop	r6
     622:	5f 90       	pop	r5
     624:	4f 90       	pop	r4
     626:	3f 90       	pop	r3
     628:	08 95       	ret

0000062a <DIO_INITPIN>:
   */
DIO_ERROR_TYPE DIO_INITPIN(DIO_PIN_TYPE PIN,DIO_PINSTATUS_TYPE STATUS)
{
	DIO_PIN_TYPE PIN_NUM;
	DIO_PORT_TYPE PORT;
	PORT=PIN/8;                                  //to determine which port i'm using
     62a:	98 2f       	mov	r25, r24
     62c:	96 95       	lsr	r25
     62e:	96 95       	lsr	r25
     630:	96 95       	lsr	r25
	PIN_NUM=PIN%8;                               //to determine which pin in the port i'm using 
	DIO_ERROR_TYPE error=VALID_DIO;
	if(PORT>4)
     632:	95 30       	cpi	r25, 0x05	; 5
     634:	08 f0       	brcs	.+2      	; 0x638 <DIO_INITPIN+0xe>
     636:	f9 c0       	rjmp	.+498    	; 0x82a <DIO_INITPIN+0x200>
DIO_ERROR_TYPE DIO_INITPIN(DIO_PIN_TYPE PIN,DIO_PINSTATUS_TYPE STATUS)
{
	DIO_PIN_TYPE PIN_NUM;
	DIO_PORT_TYPE PORT;
	PORT=PIN/8;                                  //to determine which port i'm using
	PIN_NUM=PIN%8;                               //to determine which pin in the port i'm using 
     638:	87 70       	andi	r24, 0x07	; 7
	{
		return INVALID_PIN_NUMBER;
	}
	else
	 {
	switch(STATUS)
     63a:	61 30       	cpi	r22, 0x01	; 1
     63c:	31 f0       	breq	.+12     	; 0x64a <DIO_INITPIN+0x20>
     63e:	08 f4       	brcc	.+2      	; 0x642 <DIO_INITPIN+0x18>
     640:	a4 c0       	rjmp	.+328    	; 0x78a <DIO_INITPIN+0x160>
     642:	62 30       	cpi	r22, 0x02	; 2
     644:	09 f4       	brne	.+2      	; 0x648 <DIO_INITPIN+0x1e>
     646:	51 c0       	rjmp	.+162    	; 0x6ea <DIO_INITPIN+0xc0>
     648:	ef c0       	rjmp	.+478    	; 0x828 <DIO_INITPIN+0x1fe>
	{
		case INFREE:
		switch(PORT)
     64a:	91 30       	cpi	r25, 0x01	; 1
     64c:	c1 f0       	breq	.+48     	; 0x67e <DIO_INITPIN+0x54>
     64e:	28 f0       	brcs	.+10     	; 0x65a <DIO_INITPIN+0x30>
     650:	92 30       	cpi	r25, 0x02	; 2
     652:	39 f1       	breq	.+78     	; 0x6a2 <DIO_INITPIN+0x78>
     654:	93 30       	cpi	r25, 0x03	; 3
     656:	b9 f1       	breq	.+110    	; 0x6c6 <DIO_INITPIN+0x9c>
     658:	e7 c0       	rjmp	.+462    	; 0x828 <DIO_INITPIN+0x1fe>
		{
			case PA:
			clear_bit(DDRA,PIN_NUM);
     65a:	4a b3       	in	r20, 0x1a	; 26
     65c:	21 e0       	ldi	r18, 0x01	; 1
     65e:	30 e0       	ldi	r19, 0x00	; 0
     660:	b9 01       	movw	r22, r18
     662:	02 c0       	rjmp	.+4      	; 0x668 <DIO_INITPIN+0x3e>
     664:	66 0f       	add	r22, r22
     666:	77 1f       	adc	r23, r23
     668:	8a 95       	dec	r24
     66a:	e2 f7       	brpl	.-8      	; 0x664 <DIO_INITPIN+0x3a>
     66c:	cb 01       	movw	r24, r22
     66e:	80 95       	com	r24
     670:	94 2f       	mov	r25, r20
     672:	98 23       	and	r25, r24
     674:	9a bb       	out	0x1a, r25	; 26
			clear_bit(PORTA,PIN_NUM);       /*to make sure that the port register  is cleared in case of reuse*/
     676:	9b b3       	in	r25, 0x1b	; 27
     678:	89 23       	and	r24, r25
     67a:	8b bb       	out	0x1b, r24	; 27
			break;
     67c:	d5 c0       	rjmp	.+426    	; 0x828 <DIO_INITPIN+0x1fe>
			case PB:
			clear_bit(DDRB,PIN_NUM);
     67e:	47 b3       	in	r20, 0x17	; 23
     680:	21 e0       	ldi	r18, 0x01	; 1
     682:	30 e0       	ldi	r19, 0x00	; 0
     684:	b9 01       	movw	r22, r18
     686:	02 c0       	rjmp	.+4      	; 0x68c <DIO_INITPIN+0x62>
     688:	66 0f       	add	r22, r22
     68a:	77 1f       	adc	r23, r23
     68c:	8a 95       	dec	r24
     68e:	e2 f7       	brpl	.-8      	; 0x688 <DIO_INITPIN+0x5e>
     690:	cb 01       	movw	r24, r22
     692:	80 95       	com	r24
     694:	94 2f       	mov	r25, r20
     696:	98 23       	and	r25, r24
     698:	97 bb       	out	0x17, r25	; 23
			clear_bit(PORTB,PIN_NUM);
     69a:	98 b3       	in	r25, 0x18	; 24
     69c:	89 23       	and	r24, r25
     69e:	88 bb       	out	0x18, r24	; 24
			break;
     6a0:	c3 c0       	rjmp	.+390    	; 0x828 <DIO_INITPIN+0x1fe>

			case PC:
			clear_bit(DDRC,PIN_NUM);
     6a2:	44 b3       	in	r20, 0x14	; 20
     6a4:	21 e0       	ldi	r18, 0x01	; 1
     6a6:	30 e0       	ldi	r19, 0x00	; 0
     6a8:	b9 01       	movw	r22, r18
     6aa:	02 c0       	rjmp	.+4      	; 0x6b0 <DIO_INITPIN+0x86>
     6ac:	66 0f       	add	r22, r22
     6ae:	77 1f       	adc	r23, r23
     6b0:	8a 95       	dec	r24
     6b2:	e2 f7       	brpl	.-8      	; 0x6ac <DIO_INITPIN+0x82>
     6b4:	cb 01       	movw	r24, r22
     6b6:	80 95       	com	r24
     6b8:	94 2f       	mov	r25, r20
     6ba:	98 23       	and	r25, r24
     6bc:	94 bb       	out	0x14, r25	; 20
			clear_bit(PORTC,PIN_NUM);
     6be:	95 b3       	in	r25, 0x15	; 21
     6c0:	89 23       	and	r24, r25
     6c2:	85 bb       	out	0x15, r24	; 21
			break;
     6c4:	b1 c0       	rjmp	.+354    	; 0x828 <DIO_INITPIN+0x1fe>

			case PD:
			clear_bit(DDRD,PIN_NUM);
     6c6:	41 b3       	in	r20, 0x11	; 17
     6c8:	21 e0       	ldi	r18, 0x01	; 1
     6ca:	30 e0       	ldi	r19, 0x00	; 0
     6cc:	b9 01       	movw	r22, r18
     6ce:	02 c0       	rjmp	.+4      	; 0x6d4 <DIO_INITPIN+0xaa>
     6d0:	66 0f       	add	r22, r22
     6d2:	77 1f       	adc	r23, r23
     6d4:	8a 95       	dec	r24
     6d6:	e2 f7       	brpl	.-8      	; 0x6d0 <DIO_INITPIN+0xa6>
     6d8:	cb 01       	movw	r24, r22
     6da:	80 95       	com	r24
     6dc:	94 2f       	mov	r25, r20
     6de:	98 23       	and	r25, r24
     6e0:	91 bb       	out	0x11, r25	; 17
			clear_bit(PORTD,PIN_NUM);
     6e2:	92 b3       	in	r25, 0x12	; 18
     6e4:	89 23       	and	r24, r25
     6e6:	82 bb       	out	0x12, r24	; 18
			break;
     6e8:	9f c0       	rjmp	.+318    	; 0x828 <DIO_INITPIN+0x1fe>
		}
		break;
		
		case INPLUP:
		switch(PORT)
     6ea:	91 30       	cpi	r25, 0x01	; 1
     6ec:	c1 f0       	breq	.+48     	; 0x71e <DIO_INITPIN+0xf4>
     6ee:	28 f0       	brcs	.+10     	; 0x6fa <DIO_INITPIN+0xd0>
     6f0:	92 30       	cpi	r25, 0x02	; 2
     6f2:	39 f1       	breq	.+78     	; 0x742 <DIO_INITPIN+0x118>
     6f4:	93 30       	cpi	r25, 0x03	; 3
     6f6:	b9 f1       	breq	.+110    	; 0x766 <DIO_INITPIN+0x13c>
     6f8:	97 c0       	rjmp	.+302    	; 0x828 <DIO_INITPIN+0x1fe>
		{
			case PA:
			clear_bit(DDRA,PIN_NUM);
     6fa:	4a b3       	in	r20, 0x1a	; 26
     6fc:	21 e0       	ldi	r18, 0x01	; 1
     6fe:	30 e0       	ldi	r19, 0x00	; 0
     700:	b9 01       	movw	r22, r18
     702:	02 c0       	rjmp	.+4      	; 0x708 <DIO_INITPIN+0xde>
     704:	66 0f       	add	r22, r22
     706:	77 1f       	adc	r23, r23
     708:	8a 95       	dec	r24
     70a:	e2 f7       	brpl	.-8      	; 0x704 <DIO_INITPIN+0xda>
     70c:	cb 01       	movw	r24, r22
     70e:	96 2f       	mov	r25, r22
     710:	90 95       	com	r25
     712:	94 23       	and	r25, r20
     714:	9a bb       	out	0x1a, r25	; 26
			set_bit(PORTA,PIN_NUM);
     716:	9b b3       	in	r25, 0x1b	; 27
     718:	89 2b       	or	r24, r25
     71a:	8b bb       	out	0x1b, r24	; 27
			break;
     71c:	85 c0       	rjmp	.+266    	; 0x828 <DIO_INITPIN+0x1fe>
			
			case PB:
			clear_bit(DDRB,PIN_NUM);
     71e:	47 b3       	in	r20, 0x17	; 23
     720:	21 e0       	ldi	r18, 0x01	; 1
     722:	30 e0       	ldi	r19, 0x00	; 0
     724:	b9 01       	movw	r22, r18
     726:	02 c0       	rjmp	.+4      	; 0x72c <DIO_INITPIN+0x102>
     728:	66 0f       	add	r22, r22
     72a:	77 1f       	adc	r23, r23
     72c:	8a 95       	dec	r24
     72e:	e2 f7       	brpl	.-8      	; 0x728 <DIO_INITPIN+0xfe>
     730:	cb 01       	movw	r24, r22
     732:	96 2f       	mov	r25, r22
     734:	90 95       	com	r25
     736:	94 23       	and	r25, r20
     738:	97 bb       	out	0x17, r25	; 23
			set_bit(PORTB,PIN_NUM);
     73a:	98 b3       	in	r25, 0x18	; 24
     73c:	89 2b       	or	r24, r25
     73e:	88 bb       	out	0x18, r24	; 24
			break;
     740:	73 c0       	rjmp	.+230    	; 0x828 <DIO_INITPIN+0x1fe>

			case PC:
			clear_bit(DDRC,PIN_NUM);
     742:	44 b3       	in	r20, 0x14	; 20
     744:	21 e0       	ldi	r18, 0x01	; 1
     746:	30 e0       	ldi	r19, 0x00	; 0
     748:	b9 01       	movw	r22, r18
     74a:	02 c0       	rjmp	.+4      	; 0x750 <DIO_INITPIN+0x126>
     74c:	66 0f       	add	r22, r22
     74e:	77 1f       	adc	r23, r23
     750:	8a 95       	dec	r24
     752:	e2 f7       	brpl	.-8      	; 0x74c <DIO_INITPIN+0x122>
     754:	cb 01       	movw	r24, r22
     756:	96 2f       	mov	r25, r22
     758:	90 95       	com	r25
     75a:	94 23       	and	r25, r20
     75c:	94 bb       	out	0x14, r25	; 20
			set_bit(PORTC,PIN_NUM);
     75e:	95 b3       	in	r25, 0x15	; 21
     760:	89 2b       	or	r24, r25
     762:	85 bb       	out	0x15, r24	; 21
			break;
     764:	61 c0       	rjmp	.+194    	; 0x828 <DIO_INITPIN+0x1fe>

			case PD:
			clear_bit(DDRD,PIN_NUM);
     766:	41 b3       	in	r20, 0x11	; 17
     768:	21 e0       	ldi	r18, 0x01	; 1
     76a:	30 e0       	ldi	r19, 0x00	; 0
     76c:	b9 01       	movw	r22, r18
     76e:	02 c0       	rjmp	.+4      	; 0x774 <DIO_INITPIN+0x14a>
     770:	66 0f       	add	r22, r22
     772:	77 1f       	adc	r23, r23
     774:	8a 95       	dec	r24
     776:	e2 f7       	brpl	.-8      	; 0x770 <DIO_INITPIN+0x146>
     778:	cb 01       	movw	r24, r22
     77a:	96 2f       	mov	r25, r22
     77c:	90 95       	com	r25
     77e:	94 23       	and	r25, r20
     780:	91 bb       	out	0x11, r25	; 17
			set_bit(PORTD,PIN_NUM);
     782:	92 b3       	in	r25, 0x12	; 18
     784:	89 2b       	or	r24, r25
     786:	82 bb       	out	0x12, r24	; 18
			break;
     788:	4f c0       	rjmp	.+158    	; 0x828 <DIO_INITPIN+0x1fe>
		}
		break;
		return VALID_DIO;
		
		case OUTPUT:
		switch(PORT)
     78a:	91 30       	cpi	r25, 0x01	; 1
     78c:	c1 f0       	breq	.+48     	; 0x7be <DIO_INITPIN+0x194>
     78e:	28 f0       	brcs	.+10     	; 0x79a <DIO_INITPIN+0x170>
     790:	92 30       	cpi	r25, 0x02	; 2
     792:	39 f1       	breq	.+78     	; 0x7e2 <DIO_INITPIN+0x1b8>
     794:	93 30       	cpi	r25, 0x03	; 3
     796:	b9 f1       	breq	.+110    	; 0x806 <DIO_INITPIN+0x1dc>
     798:	47 c0       	rjmp	.+142    	; 0x828 <DIO_INITPIN+0x1fe>
		{
			case PA:
			clear_bit(PORTA,PIN_NUM);
     79a:	4b b3       	in	r20, 0x1b	; 27
     79c:	21 e0       	ldi	r18, 0x01	; 1
     79e:	30 e0       	ldi	r19, 0x00	; 0
     7a0:	b9 01       	movw	r22, r18
     7a2:	02 c0       	rjmp	.+4      	; 0x7a8 <DIO_INITPIN+0x17e>
     7a4:	66 0f       	add	r22, r22
     7a6:	77 1f       	adc	r23, r23
     7a8:	8a 95       	dec	r24
     7aa:	e2 f7       	brpl	.-8      	; 0x7a4 <DIO_INITPIN+0x17a>
     7ac:	cb 01       	movw	r24, r22
     7ae:	96 2f       	mov	r25, r22
     7b0:	90 95       	com	r25
     7b2:	94 23       	and	r25, r20
     7b4:	9b bb       	out	0x1b, r25	; 27
			set_bit(DDRA,PIN_NUM);
     7b6:	9a b3       	in	r25, 0x1a	; 26
     7b8:	89 2b       	or	r24, r25
     7ba:	8a bb       	out	0x1a, r24	; 26
			break;
     7bc:	35 c0       	rjmp	.+106    	; 0x828 <DIO_INITPIN+0x1fe>
			
			case PB:
			clear_bit(PORTB,PIN_NUM);
     7be:	48 b3       	in	r20, 0x18	; 24
     7c0:	21 e0       	ldi	r18, 0x01	; 1
     7c2:	30 e0       	ldi	r19, 0x00	; 0
     7c4:	b9 01       	movw	r22, r18
     7c6:	02 c0       	rjmp	.+4      	; 0x7cc <DIO_INITPIN+0x1a2>
     7c8:	66 0f       	add	r22, r22
     7ca:	77 1f       	adc	r23, r23
     7cc:	8a 95       	dec	r24
     7ce:	e2 f7       	brpl	.-8      	; 0x7c8 <DIO_INITPIN+0x19e>
     7d0:	cb 01       	movw	r24, r22
     7d2:	96 2f       	mov	r25, r22
     7d4:	90 95       	com	r25
     7d6:	94 23       	and	r25, r20
     7d8:	98 bb       	out	0x18, r25	; 24
			set_bit(DDRB,PIN_NUM);
     7da:	97 b3       	in	r25, 0x17	; 23
     7dc:	89 2b       	or	r24, r25
     7de:	87 bb       	out	0x17, r24	; 23
			break;
     7e0:	23 c0       	rjmp	.+70     	; 0x828 <DIO_INITPIN+0x1fe>

			case PC:
			clear_bit(PORTC,PIN_NUM);
     7e2:	45 b3       	in	r20, 0x15	; 21
     7e4:	21 e0       	ldi	r18, 0x01	; 1
     7e6:	30 e0       	ldi	r19, 0x00	; 0
     7e8:	b9 01       	movw	r22, r18
     7ea:	02 c0       	rjmp	.+4      	; 0x7f0 <DIO_INITPIN+0x1c6>
     7ec:	66 0f       	add	r22, r22
     7ee:	77 1f       	adc	r23, r23
     7f0:	8a 95       	dec	r24
     7f2:	e2 f7       	brpl	.-8      	; 0x7ec <DIO_INITPIN+0x1c2>
     7f4:	cb 01       	movw	r24, r22
     7f6:	96 2f       	mov	r25, r22
     7f8:	90 95       	com	r25
     7fa:	94 23       	and	r25, r20
     7fc:	95 bb       	out	0x15, r25	; 21
			set_bit(DDRC,PIN_NUM);
     7fe:	94 b3       	in	r25, 0x14	; 20
     800:	89 2b       	or	r24, r25
     802:	84 bb       	out	0x14, r24	; 20
			break;
     804:	11 c0       	rjmp	.+34     	; 0x828 <DIO_INITPIN+0x1fe>

			case PD:
			clear_bit(PORTD,PIN_NUM);
     806:	42 b3       	in	r20, 0x12	; 18
     808:	21 e0       	ldi	r18, 0x01	; 1
     80a:	30 e0       	ldi	r19, 0x00	; 0
     80c:	b9 01       	movw	r22, r18
     80e:	02 c0       	rjmp	.+4      	; 0x814 <DIO_INITPIN+0x1ea>
     810:	66 0f       	add	r22, r22
     812:	77 1f       	adc	r23, r23
     814:	8a 95       	dec	r24
     816:	e2 f7       	brpl	.-8      	; 0x810 <DIO_INITPIN+0x1e6>
     818:	cb 01       	movw	r24, r22
     81a:	96 2f       	mov	r25, r22
     81c:	90 95       	com	r25
     81e:	94 23       	and	r25, r20
     820:	92 bb       	out	0x12, r25	; 18
			set_bit(DDRD,PIN_NUM);
     822:	91 b3       	in	r25, 0x11	; 17
     824:	89 2b       	or	r24, r25
     826:	81 bb       	out	0x11, r24	; 17
		break;
		return VALID_DIO;

	}
		}
}
     828:	08 95       	ret
     82a:	82 e0       	ldi	r24, 0x02	; 2
     82c:	08 95       	ret

0000082e <DIO_WRITEPIN>:
DIO_ERROR_TYPE DIO_WRITEPIN(DIO_PIN_TYPE PIN,DIO_VOLTAGE_TYPE VOLTAGE)
{
	
	DIO_PIN_TYPE PIN_NUM;
	DIO_PORT_TYPE PORT;
	PORT=PIN/8;
     82e:	98 2f       	mov	r25, r24
     830:	96 95       	lsr	r25
     832:	96 95       	lsr	r25
     834:	96 95       	lsr	r25
	PIN_NUM=PIN%8;
	if(PORT>4)
     836:	95 30       	cpi	r25, 0x05	; 5
     838:	08 f0       	brcs	.+2      	; 0x83c <DIO_WRITEPIN+0xe>
     83a:	8e c0       	rjmp	.+284    	; 0x958 <__stack+0xf9>
	}
	else if(PIN_NUM>32)
	{
		return INVALID_PIN_NUMBER;
	}
	else if(VOLTAGE>2)
     83c:	63 30       	cpi	r22, 0x03	; 3
     83e:	08 f0       	brcs	.+2      	; 0x842 <DIO_WRITEPIN+0x14>
     840:	8d c0       	rjmp	.+282    	; 0x95c <__stack+0xfd>
{
	
	DIO_PIN_TYPE PIN_NUM;
	DIO_PORT_TYPE PORT;
	PORT=PIN/8;
	PIN_NUM=PIN%8;
     842:	87 70       	andi	r24, 0x07	; 7
		return INVALID_VOLTAGE;
	}
	else 
	{
	
	if(VOLTAGE==HIGH)
     844:	61 30       	cpi	r22, 0x01	; 1
     846:	09 f0       	breq	.+2      	; 0x84a <DIO_WRITEPIN+0x1c>
     848:	40 c0       	rjmp	.+128    	; 0x8ca <__stack+0x6b>
	{
		switch(PORT)
     84a:	91 30       	cpi	r25, 0x01	; 1
     84c:	a1 f0       	breq	.+40     	; 0x876 <__stack+0x17>
     84e:	28 f0       	brcs	.+10     	; 0x85a <DIO_WRITEPIN+0x2c>
     850:	92 30       	cpi	r25, 0x02	; 2
     852:	f9 f0       	breq	.+62     	; 0x892 <__stack+0x33>
     854:	93 30       	cpi	r25, 0x03	; 3
     856:	59 f1       	breq	.+86     	; 0x8ae <__stack+0x4f>
     858:	83 c0       	rjmp	.+262    	; 0x960 <__stack+0x101>
		{
			case PA:
			set_bit(PORTA,PIN_NUM);
     85a:	4b b3       	in	r20, 0x1b	; 27
     85c:	21 e0       	ldi	r18, 0x01	; 1
     85e:	30 e0       	ldi	r19, 0x00	; 0
     860:	b9 01       	movw	r22, r18
     862:	02 c0       	rjmp	.+4      	; 0x868 <__stack+0x9>
     864:	66 0f       	add	r22, r22
     866:	77 1f       	adc	r23, r23
     868:	8a 95       	dec	r24
     86a:	e2 f7       	brpl	.-8      	; 0x864 <__stack+0x5>
     86c:	cb 01       	movw	r24, r22
     86e:	84 2b       	or	r24, r20
     870:	8b bb       	out	0x1b, r24	; 27
			case PD:
			set_bit(PORTD,PIN_NUM);
			break;

		}
		return VALID_DIO;
     872:	80 e0       	ldi	r24, 0x00	; 0
	{
		switch(PORT)
		{
			case PA:
			set_bit(PORTA,PIN_NUM);
			break;
     874:	08 95       	ret
			case PB:
			set_bit(PORTB,PIN_NUM);
     876:	48 b3       	in	r20, 0x18	; 24
     878:	21 e0       	ldi	r18, 0x01	; 1
     87a:	30 e0       	ldi	r19, 0x00	; 0
     87c:	b9 01       	movw	r22, r18
     87e:	02 c0       	rjmp	.+4      	; 0x884 <__stack+0x25>
     880:	66 0f       	add	r22, r22
     882:	77 1f       	adc	r23, r23
     884:	8a 95       	dec	r24
     886:	e2 f7       	brpl	.-8      	; 0x880 <__stack+0x21>
     888:	cb 01       	movw	r24, r22
     88a:	84 2b       	or	r24, r20
     88c:	88 bb       	out	0x18, r24	; 24
			case PD:
			set_bit(PORTD,PIN_NUM);
			break;

		}
		return VALID_DIO;
     88e:	80 e0       	ldi	r24, 0x00	; 0
			case PA:
			set_bit(PORTA,PIN_NUM);
			break;
			case PB:
			set_bit(PORTB,PIN_NUM);
			break;
     890:	08 95       	ret
			case PC:
			set_bit(PORTC,PIN_NUM);
     892:	45 b3       	in	r20, 0x15	; 21
     894:	21 e0       	ldi	r18, 0x01	; 1
     896:	30 e0       	ldi	r19, 0x00	; 0
     898:	b9 01       	movw	r22, r18
     89a:	02 c0       	rjmp	.+4      	; 0x8a0 <__stack+0x41>
     89c:	66 0f       	add	r22, r22
     89e:	77 1f       	adc	r23, r23
     8a0:	8a 95       	dec	r24
     8a2:	e2 f7       	brpl	.-8      	; 0x89c <__stack+0x3d>
     8a4:	cb 01       	movw	r24, r22
     8a6:	84 2b       	or	r24, r20
     8a8:	85 bb       	out	0x15, r24	; 21
			case PD:
			set_bit(PORTD,PIN_NUM);
			break;

		}
		return VALID_DIO;
     8aa:	80 e0       	ldi	r24, 0x00	; 0
			case PB:
			set_bit(PORTB,PIN_NUM);
			break;
			case PC:
			set_bit(PORTC,PIN_NUM);
			break;
     8ac:	08 95       	ret
			case PD:
			set_bit(PORTD,PIN_NUM);
     8ae:	42 b3       	in	r20, 0x12	; 18
     8b0:	21 e0       	ldi	r18, 0x01	; 1
     8b2:	30 e0       	ldi	r19, 0x00	; 0
     8b4:	b9 01       	movw	r22, r18
     8b6:	02 c0       	rjmp	.+4      	; 0x8bc <__stack+0x5d>
     8b8:	66 0f       	add	r22, r22
     8ba:	77 1f       	adc	r23, r23
     8bc:	8a 95       	dec	r24
     8be:	e2 f7       	brpl	.-8      	; 0x8b8 <__stack+0x59>
     8c0:	cb 01       	movw	r24, r22
     8c2:	84 2b       	or	r24, r20
     8c4:	82 bb       	out	0x12, r24	; 18
			break;

		}
		return VALID_DIO;
     8c6:	80 e0       	ldi	r24, 0x00	; 0
			case PC:
			set_bit(PORTC,PIN_NUM);
			break;
			case PD:
			set_bit(PORTD,PIN_NUM);
			break;
     8c8:	08 95       	ret
		}
		return VALID_DIO;
	}


	else if(VOLTAGE==LOW)
     8ca:	61 11       	cpse	r22, r1
     8cc:	44 c0       	rjmp	.+136    	; 0x956 <__stack+0xf7>
	{
		switch(PORT)
     8ce:	91 30       	cpi	r25, 0x01	; 1
     8d0:	a9 f0       	breq	.+42     	; 0x8fc <__stack+0x9d>
     8d2:	28 f0       	brcs	.+10     	; 0x8de <__stack+0x7f>
     8d4:	92 30       	cpi	r25, 0x02	; 2
     8d6:	09 f1       	breq	.+66     	; 0x91a <__stack+0xbb>
     8d8:	93 30       	cpi	r25, 0x03	; 3
     8da:	71 f1       	breq	.+92     	; 0x938 <__stack+0xd9>
     8dc:	43 c0       	rjmp	.+134    	; 0x964 <__stack+0x105>
		{
			case PA:
			clear_bit(PORTA,PIN_NUM);
     8de:	4b b3       	in	r20, 0x1b	; 27
     8e0:	21 e0       	ldi	r18, 0x01	; 1
     8e2:	30 e0       	ldi	r19, 0x00	; 0
     8e4:	b9 01       	movw	r22, r18
     8e6:	02 c0       	rjmp	.+4      	; 0x8ec <__stack+0x8d>
     8e8:	66 0f       	add	r22, r22
     8ea:	77 1f       	adc	r23, r23
     8ec:	8a 95       	dec	r24
     8ee:	e2 f7       	brpl	.-8      	; 0x8e8 <__stack+0x89>
     8f0:	cb 01       	movw	r24, r22
     8f2:	80 95       	com	r24
     8f4:	84 23       	and	r24, r20
     8f6:	8b bb       	out	0x1b, r24	; 27
			case PD:
			clear_bit(PORTD,PIN_NUM);
			break;

		}
		return VALID_DIO;
     8f8:	80 e0       	ldi	r24, 0x00	; 0
	{
		switch(PORT)
		{
			case PA:
			clear_bit(PORTA,PIN_NUM);
			break;
     8fa:	08 95       	ret
			case PB:
			clear_bit(PORTB,PIN_NUM);
     8fc:	48 b3       	in	r20, 0x18	; 24
     8fe:	21 e0       	ldi	r18, 0x01	; 1
     900:	30 e0       	ldi	r19, 0x00	; 0
     902:	b9 01       	movw	r22, r18
     904:	02 c0       	rjmp	.+4      	; 0x90a <__stack+0xab>
     906:	66 0f       	add	r22, r22
     908:	77 1f       	adc	r23, r23
     90a:	8a 95       	dec	r24
     90c:	e2 f7       	brpl	.-8      	; 0x906 <__stack+0xa7>
     90e:	cb 01       	movw	r24, r22
     910:	80 95       	com	r24
     912:	84 23       	and	r24, r20
     914:	88 bb       	out	0x18, r24	; 24
			case PD:
			clear_bit(PORTD,PIN_NUM);
			break;

		}
		return VALID_DIO;
     916:	80 e0       	ldi	r24, 0x00	; 0
			case PA:
			clear_bit(PORTA,PIN_NUM);
			break;
			case PB:
			clear_bit(PORTB,PIN_NUM);
			break;
     918:	08 95       	ret
			case PC:
			clear_bit(PORTC,PIN_NUM);
     91a:	45 b3       	in	r20, 0x15	; 21
     91c:	21 e0       	ldi	r18, 0x01	; 1
     91e:	30 e0       	ldi	r19, 0x00	; 0
     920:	b9 01       	movw	r22, r18
     922:	02 c0       	rjmp	.+4      	; 0x928 <__stack+0xc9>
     924:	66 0f       	add	r22, r22
     926:	77 1f       	adc	r23, r23
     928:	8a 95       	dec	r24
     92a:	e2 f7       	brpl	.-8      	; 0x924 <__stack+0xc5>
     92c:	cb 01       	movw	r24, r22
     92e:	80 95       	com	r24
     930:	84 23       	and	r24, r20
     932:	85 bb       	out	0x15, r24	; 21
			case PD:
			clear_bit(PORTD,PIN_NUM);
			break;

		}
		return VALID_DIO;
     934:	80 e0       	ldi	r24, 0x00	; 0
			case PB:
			clear_bit(PORTB,PIN_NUM);
			break;
			case PC:
			clear_bit(PORTC,PIN_NUM);
			break;
     936:	08 95       	ret
			case PD:
			clear_bit(PORTD,PIN_NUM);
     938:	42 b3       	in	r20, 0x12	; 18
     93a:	21 e0       	ldi	r18, 0x01	; 1
     93c:	30 e0       	ldi	r19, 0x00	; 0
     93e:	b9 01       	movw	r22, r18
     940:	02 c0       	rjmp	.+4      	; 0x946 <__stack+0xe7>
     942:	66 0f       	add	r22, r22
     944:	77 1f       	adc	r23, r23
     946:	8a 95       	dec	r24
     948:	e2 f7       	brpl	.-8      	; 0x942 <__stack+0xe3>
     94a:	cb 01       	movw	r24, r22
     94c:	80 95       	com	r24
     94e:	84 23       	and	r24, r20
     950:	82 bb       	out	0x12, r24	; 18
			break;

		}
		return VALID_DIO;
     952:	80 e0       	ldi	r24, 0x00	; 0
			case PC:
			clear_bit(PORTC,PIN_NUM);
			break;
			case PD:
			clear_bit(PORTD,PIN_NUM);
			break;
     954:	08 95       	ret

		}
		return VALID_DIO;
	}
}
}
     956:	08 95       	ret
	DIO_PORT_TYPE PORT;
	PORT=PIN/8;
	PIN_NUM=PIN%8;
	if(PORT>4)
	{
		return INVALID_PORT;
     958:	82 e0       	ldi	r24, 0x02	; 2
     95a:	08 95       	ret
	{
		return INVALID_PIN_NUMBER;
	}
	else if(VOLTAGE>2)
	{
		return INVALID_VOLTAGE;
     95c:	83 e0       	ldi	r24, 0x03	; 3
     95e:	08 95       	ret
			case PD:
			set_bit(PORTD,PIN_NUM);
			break;

		}
		return VALID_DIO;
     960:	80 e0       	ldi	r24, 0x00	; 0
     962:	08 95       	ret
			case PD:
			clear_bit(PORTD,PIN_NUM);
			break;

		}
		return VALID_DIO;
     964:	80 e0       	ldi	r24, 0x00	; 0
	}
}
}
     966:	08 95       	ret

00000968 <SPI_master_init>:
{
	// Wait for reception complete
	while(!(SPSR & (1<<7)));
	// Return data register 
	return SPDR;
}
     968:	60 e0       	ldi	r22, 0x00	; 0
     96a:	8c e0       	ldi	r24, 0x0C	; 12
     96c:	0e 94 15 03 	call	0x62a	; 0x62a <DIO_INITPIN>
     970:	60 e0       	ldi	r22, 0x00	; 0
     972:	8d e0       	ldi	r24, 0x0D	; 13
     974:	0e 94 15 03 	call	0x62a	; 0x62a <DIO_INITPIN>
     978:	60 e0       	ldi	r22, 0x00	; 0
     97a:	8f e0       	ldi	r24, 0x0F	; 15
     97c:	0e 94 15 03 	call	0x62a	; 0x62a <DIO_INITPIN>
     980:	60 e0       	ldi	r22, 0x00	; 0
     982:	8c e0       	ldi	r24, 0x0C	; 12
     984:	0e 94 15 03 	call	0x62a	; 0x62a <DIO_INITPIN>
     988:	61 e0       	ldi	r22, 0x01	; 1
     98a:	8e e0       	ldi	r24, 0x0E	; 14
     98c:	0e 94 15 03 	call	0x62a	; 0x62a <DIO_INITPIN>
     990:	81 e5       	ldi	r24, 0x51	; 81
     992:	8d b9       	out	0x0d, r24	; 13
     994:	08 95       	ret

00000996 <SPI_transmit_char>:
     996:	8f b9       	out	0x0f, r24	; 15
     998:	77 9b       	sbis	0x0e, 7	; 14
     99a:	fe cf       	rjmp	.-4      	; 0x998 <SPI_transmit_char+0x2>
     99c:	08 95       	ret

0000099e <SPI_transmit_string>:

	void SPI_transmit_string(char * string)
	{
     99e:	0f 93       	push	r16
     9a0:	1f 93       	push	r17
     9a2:	cf 93       	push	r28
     9a4:	fc 01       	movw	r30, r24
		
		uint8_t i =0 ;
		while(string[i]!=0)
     9a6:	80 81       	ld	r24, Z
     9a8:	88 23       	and	r24, r24
     9aa:	61 f0       	breq	.+24     	; 0x9c4 <SPI_transmit_string+0x26>
     9ac:	8f 01       	movw	r16, r30
     9ae:	c0 e0       	ldi	r28, 0x00	; 0
		{ SPI_transmit_char((string[i]-'30')); i++;}
     9b0:	80 53       	subi	r24, 0x30	; 48
     9b2:	0e 94 cb 04 	call	0x996	; 0x996 <SPI_transmit_char>
     9b6:	cf 5f       	subi	r28, 0xFF	; 255

	void SPI_transmit_string(char * string)
	{
		
		uint8_t i =0 ;
		while(string[i]!=0)
     9b8:	f8 01       	movw	r30, r16
     9ba:	ec 0f       	add	r30, r28
     9bc:	f1 1d       	adc	r31, r1
     9be:	80 81       	ld	r24, Z
     9c0:	81 11       	cpse	r24, r1
     9c2:	f6 cf       	rjmp	.-20     	; 0x9b0 <SPI_transmit_string+0x12>
		{ SPI_transmit_char((string[i]-'30')); i++;}
	}
     9c4:	cf 91       	pop	r28
     9c6:	1f 91       	pop	r17
     9c8:	0f 91       	pop	r16
     9ca:	08 95       	ret

000009cc <__vector_5>:
}




ISR(TIMER2_OVF){
     9cc:	1f 92       	push	r1
     9ce:	0f 92       	push	r0
     9d0:	0f b6       	in	r0, 0x3f	; 63
     9d2:	0f 92       	push	r0
     9d4:	11 24       	eor	r1, r1
	
     9d6:	0f 90       	pop	r0
     9d8:	0f be       	out	0x3f, r0	; 63
     9da:	0f 90       	pop	r0
     9dc:	1f 90       	pop	r1
     9de:	18 95       	reti

000009e0 <I2C_init>:
		else {
			
			return DATA_SENT_FAILED ;
		}
	
}
     9e0:	11 b8       	out	0x01, r1	; 1
     9e2:	81 30       	cpi	r24, 0x01	; 1
     9e4:	49 f0       	breq	.+18     	; 0x9f8 <I2C_init+0x18>
     9e6:	28 f0       	brcs	.+10     	; 0x9f2 <I2C_init+0x12>
     9e8:	82 30       	cpi	r24, 0x02	; 2
     9ea:	49 f0       	breq	.+18     	; 0x9fe <I2C_init+0x1e>
     9ec:	83 30       	cpi	r24, 0x03	; 3
     9ee:	51 f0       	breq	.+20     	; 0xa04 <I2C_init+0x24>
     9f0:	0b c0       	rjmp	.+22     	; 0xa08 <I2C_init+0x28>
     9f2:	08 98       	cbi	0x01, 0	; 1
     9f4:	09 98       	cbi	0x01, 1	; 1
     9f6:	08 c0       	rjmp	.+16     	; 0xa08 <I2C_init+0x28>
     9f8:	08 9a       	sbi	0x01, 0	; 1
     9fa:	09 98       	cbi	0x01, 1	; 1
     9fc:	05 c0       	rjmp	.+10     	; 0xa08 <I2C_init+0x28>
     9fe:	08 98       	cbi	0x01, 0	; 1
     a00:	09 9a       	sbi	0x01, 1	; 1
     a02:	02 c0       	rjmp	.+4      	; 0xa08 <I2C_init+0x28>
     a04:	08 9a       	sbi	0x01, 0	; 1
     a06:	09 9a       	sbi	0x01, 1	; 1
     a08:	61 b1       	in	r22, 0x01	; 1
     a0a:	63 70       	andi	r22, 0x03	; 3
     a0c:	70 e0       	ldi	r23, 0x00	; 0
     a0e:	80 e0       	ldi	r24, 0x00	; 0
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	0e 94 2d 07 	call	0xe5a	; 0xe5a <__floatsisf>
     a16:	9b 01       	movw	r18, r22
     a18:	ac 01       	movw	r20, r24
     a1a:	60 e0       	ldi	r22, 0x00	; 0
     a1c:	70 e0       	ldi	r23, 0x00	; 0
     a1e:	80 e8       	ldi	r24, 0x80	; 128
     a20:	90 e4       	ldi	r25, 0x40	; 64
     a22:	0e 94 c7 07 	call	0xf8e	; 0xf8e <pow>
     a26:	9b 01       	movw	r18, r22
     a28:	ac 01       	movw	r20, r24
     a2a:	0e 94 1e 06 	call	0xc3c	; 0xc3c <__addsf3>
     a2e:	9b 01       	movw	r18, r22
     a30:	ac 01       	movw	r20, r24
     a32:	60 e0       	ldi	r22, 0x00	; 0
     a34:	70 e0       	ldi	r23, 0x00	; 0
     a36:	80 e8       	ldi	r24, 0x80	; 128
     a38:	90 e4       	ldi	r25, 0x40	; 64
     a3a:	0e 94 8a 06 	call	0xd14	; 0xd14 <__divsf3>
     a3e:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__fixunssfsi>
     a42:	60 b9       	out	0x00, r22	; 0
     a44:	08 95       	ret

00000a46 <I2C_start>:
     a46:	86 b7       	in	r24, 0x36	; 54
     a48:	80 68       	ori	r24, 0x80	; 128
     a4a:	86 bf       	out	0x36, r24	; 54
     a4c:	86 b7       	in	r24, 0x36	; 54
     a4e:	80 62       	ori	r24, 0x20	; 32
     a50:	86 bf       	out	0x36, r24	; 54
     a52:	86 b7       	in	r24, 0x36	; 54
     a54:	84 60       	ori	r24, 0x04	; 4
     a56:	86 bf       	out	0x36, r24	; 54
     a58:	06 b6       	in	r0, 0x36	; 54
     a5a:	07 fe       	sbrs	r0, 7
     a5c:	fd cf       	rjmp	.-6      	; 0xa58 <I2C_start+0x12>
     a5e:	91 b1       	in	r25, 0x01	; 1
     a60:	98 7f       	andi	r25, 0xF8	; 248
     a62:	81 e0       	ldi	r24, 0x01	; 1
     a64:	98 30       	cpi	r25, 0x08	; 8
     a66:	09 f4       	brne	.+2      	; 0xa6a <I2C_start+0x24>
     a68:	80 e0       	ldi	r24, 0x00	; 0
     a6a:	08 95       	ret

00000a6c <I2C_addressEvent>:
     a6c:	66 23       	and	r22, r22
     a6e:	19 f0       	breq	.+6      	; 0xa76 <I2C_addressEvent+0xa>
     a70:	61 30       	cpi	r22, 0x01	; 1
     a72:	a9 f0       	breq	.+42     	; 0xa9e <I2C_addressEvent+0x32>
     a74:	29 c0       	rjmp	.+82     	; 0xac8 <I2C_addressEvent+0x5c>
     a76:	83 b9       	out	0x03, r24	; 3
     a78:	86 b7       	in	r24, 0x36	; 54
     a7a:	80 68       	ori	r24, 0x80	; 128
     a7c:	86 bf       	out	0x36, r24	; 54
     a7e:	86 b7       	in	r24, 0x36	; 54
     a80:	84 60       	ori	r24, 0x04	; 4
     a82:	86 bf       	out	0x36, r24	; 54
     a84:	06 b6       	in	r0, 0x36	; 54
     a86:	07 fe       	sbrs	r0, 7
     a88:	fd cf       	rjmp	.-6      	; 0xa84 <I2C_addressEvent+0x18>
     a8a:	81 b1       	in	r24, 0x01	; 1
     a8c:	88 7f       	andi	r24, 0xF8	; 248
     a8e:	88 31       	cpi	r24, 0x18	; 24
     a90:	e1 f0       	breq	.+56     	; 0xaca <I2C_addressEvent+0x5e>
     a92:	81 b1       	in	r24, 0x01	; 1
     a94:	88 7f       	andi	r24, 0xF8	; 248
     a96:	80 32       	cpi	r24, 0x20	; 32
     a98:	d1 f0       	breq	.+52     	; 0xace <I2C_addressEvent+0x62>
     a9a:	85 e0       	ldi	r24, 0x05	; 5
     a9c:	08 95       	ret
     a9e:	8f 5f       	subi	r24, 0xFF	; 255
     aa0:	83 b9       	out	0x03, r24	; 3
     aa2:	86 b7       	in	r24, 0x36	; 54
     aa4:	80 68       	ori	r24, 0x80	; 128
     aa6:	86 bf       	out	0x36, r24	; 54
     aa8:	86 b7       	in	r24, 0x36	; 54
     aaa:	84 60       	ori	r24, 0x04	; 4
     aac:	86 bf       	out	0x36, r24	; 54
     aae:	06 b6       	in	r0, 0x36	; 54
     ab0:	07 fe       	sbrs	r0, 7
     ab2:	fd cf       	rjmp	.-6      	; 0xaae <I2C_addressEvent+0x42>
     ab4:	81 b1       	in	r24, 0x01	; 1
     ab6:	88 7f       	andi	r24, 0xF8	; 248
     ab8:	80 34       	cpi	r24, 0x40	; 64
     aba:	59 f0       	breq	.+22     	; 0xad2 <I2C_addressEvent+0x66>
     abc:	81 b1       	in	r24, 0x01	; 1
     abe:	88 7f       	andi	r24, 0xF8	; 248
     ac0:	88 34       	cpi	r24, 0x48	; 72
     ac2:	49 f0       	breq	.+18     	; 0xad6 <I2C_addressEvent+0x6a>
     ac4:	88 e0       	ldi	r24, 0x08	; 8
     ac6:	08 95       	ret
     ac8:	08 95       	ret
     aca:	82 e0       	ldi	r24, 0x02	; 2
     acc:	08 95       	ret
     ace:	83 e0       	ldi	r24, 0x03	; 3
     ad0:	08 95       	ret
     ad2:	86 e0       	ldi	r24, 0x06	; 6
     ad4:	08 95       	ret
     ad6:	87 e0       	ldi	r24, 0x07	; 7
     ad8:	08 95       	ret

00000ada <I2C_stop>:
/******************************************************************************************************************************************/
/**DESCRIPTION:-
 This Function is used To Write The Stop Bit For The Communication*/
void I2C_stop(){
	clear_bit(TWCR,TWSTA);		 // clear start
     ada:	86 b7       	in	r24, 0x36	; 54
     adc:	8f 7d       	andi	r24, 0xDF	; 223
     ade:	86 bf       	out	0x36, r24	; 54
	set_bit(TWCR,TWINT);		 // clear flag
     ae0:	86 b7       	in	r24, 0x36	; 54
     ae2:	80 68       	ori	r24, 0x80	; 128
     ae4:	86 bf       	out	0x36, r24	; 54
	set_bit(TWCR,TWSTO);		// enable stop condition
     ae6:	86 b7       	in	r24, 0x36	; 54
     ae8:	80 61       	ori	r24, 0x10	; 16
     aea:	86 bf       	out	0x36, r24	; 54
	set_bit(TWCR,TWEN);			// enable i2c
     aec:	86 b7       	in	r24, 0x36	; 54
     aee:	84 60       	ori	r24, 0x04	; 4
     af0:	86 bf       	out	0x36, r24	; 54
	while(read_bit(TWCR,TWSTO) != 0);  // wait for flag to set
     af2:	06 b6       	in	r0, 0x36	; 54
     af4:	04 fc       	sbrc	r0, 4
     af6:	fd cf       	rjmp	.-6      	; 0xaf2 <I2C_stop+0x18>
	
}
     af8:	08 95       	ret

00000afa <I2C_receiveData>:
/******************************************************************************************************************************************/
/**DESCRIPTION:-
 This Function is used To Receive Data From a Slave To Master*/
uint8_t I2C_receiveData(uint8_t *data, ACKOLEDGMENT ack){
     afa:	fc 01       	movw	r30, r24
	
	switch(ack){ 
     afc:	66 23       	and	r22, r22
     afe:	19 f0       	breq	.+6      	; 0xb06 <I2C_receiveData+0xc>
     b00:	61 30       	cpi	r22, 0x01	; 1
     b02:	29 f0       	breq	.+10     	; 0xb0e <I2C_receiveData+0x14>
     b04:	07 c0       	rjmp	.+14     	; 0xb14 <I2C_receiveData+0x1a>
		case ACK :
		set_bit(TWCR,TWEA); 
     b06:	86 b7       	in	r24, 0x36	; 54
     b08:	80 64       	ori	r24, 0x40	; 64
     b0a:	86 bf       	out	0x36, r24	; 54
		break;
     b0c:	03 c0       	rjmp	.+6      	; 0xb14 <I2C_receiveData+0x1a>
		
		case NACK :
		clear_bit(TWCR,TWEA);
     b0e:	86 b7       	in	r24, 0x36	; 54
     b10:	8f 7b       	andi	r24, 0xBF	; 191
     b12:	86 bf       	out	0x36, r24	; 54
		break;
		
	}
	
	set_bit(TWCR,TWINT);  // clear flag
     b14:	96 b7       	in	r25, 0x36	; 54
     b16:	90 68       	ori	r25, 0x80	; 128
     b18:	96 bf       	out	0x36, r25	; 54
	set_bit(TWCR,TWEN);   // enable i2c
     b1a:	96 b7       	in	r25, 0x36	; 54
     b1c:	94 60       	ori	r25, 0x04	; 4
     b1e:	96 bf       	out	0x36, r25	; 54
	while(read_bit(TWCR,TWINT) != 1);  // wait for flag to set
     b20:	06 b6       	in	r0, 0x36	; 54
     b22:	07 fe       	sbrs	r0, 7
     b24:	fd cf       	rjmp	.-6      	; 0xb20 <I2C_receiveData+0x26>
	*data = TWDR ;
     b26:	83 b1       	in	r24, 0x03	; 3
     b28:	80 83       	st	Z, r24
	if((TWSR & 0xf8) == DATA_RECIEVE_ACK){    // check status of receiving data and ack received
     b2a:	81 b1       	in	r24, 0x01	; 1
     b2c:	88 7f       	andi	r24, 0xF8	; 248
     b2e:	80 35       	cpi	r24, 0x50	; 80
     b30:	31 f0       	breq	.+12     	; 0xb3e <I2C_receiveData+0x44>
		return DATA_RECIEVE_ACK_OK ;
	}
	else if ((TWSR & 0xf8) == DATA_RECIEVE_NACK){
     b32:	81 b1       	in	r24, 0x01	; 1
     b34:	88 7f       	andi	r24, 0xF8	; 248
     b36:	88 35       	cpi	r24, 0x58	; 88
     b38:	21 f0       	breq	.+8      	; 0xb42 <I2C_receiveData+0x48>
		return DATA_RECIEVE_NACK_OK ;
	}
	else {
		
		return DATA_RECIEVE_FAILED ;
     b3a:	8e e0       	ldi	r24, 0x0E	; 14
     b3c:	08 95       	ret
	set_bit(TWCR,TWINT);  // clear flag
	set_bit(TWCR,TWEN);   // enable i2c
	while(read_bit(TWCR,TWINT) != 1);  // wait for flag to set
	*data = TWDR ;
	if((TWSR & 0xf8) == DATA_RECIEVE_ACK){    // check status of receiving data and ack received
		return DATA_RECIEVE_ACK_OK ;
     b3e:	8c e0       	ldi	r24, 0x0C	; 12
     b40:	08 95       	ret
	}
	else if ((TWSR & 0xf8) == DATA_RECIEVE_NACK){
		return DATA_RECIEVE_NACK_OK ;
     b42:	8d e0       	ldi	r24, 0x0D	; 13
		
		return DATA_RECIEVE_FAILED ;
	}
	

}
     b44:	08 95       	ret

00000b46 <USART_init>:
#include "uart.h"

void USART_init(void)
{
	uint16 baud= 51;
	UBRRH = (uint8_t)(baud>>8); // high nibble bits
     b46:	10 bc       	out	0x20, r1	; 32
	UBRRL = (uint8_t) baud; // low nibble bits	
     b48:	83 e3       	ldi	r24, 0x33	; 51
     b4a:	89 b9       	out	0x09, r24	; 9

	UCSRB |=((1<<4)|(1<<3));     //Enable transmit and enable RXENn TXENn
     b4c:	8a b1       	in	r24, 0x0a	; 10
     b4e:	88 61       	ori	r24, 0x18	; 24
     b50:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1 << UCSZ1) | (1 << UCSZ0) | (1 << URSEL);   // 2. Set the data size and enable writing to UCSRC
     b52:	86 e8       	ldi	r24, 0x86	; 134
     b54:	80 bd       	out	0x20, r24	; 32
     b56:	08 95       	ret

00000b58 <USART_transmit>:

// Data Transmission Sending Frames with 5 to 8 Data Bit
void USART_transmit( uint8_t data )
{
	// Wait for empty transmit buffer
	while(! (UCSRA & (1 << UDRE)));
     b58:	5d 9b       	sbis	0x0b, 5	; 11
     b5a:	fe cf       	rjmp	.-4      	; 0xb58 <USART_transmit>
	;
	// Put data into buffer, sends the data
	UDR = data;
     b5c:	8c b9       	out	0x0c, r24	; 12
     b5e:	08 95       	ret

00000b60 <USART_receive>:

// Receiving Frames with 5 to 8 Data Bits
uint8_t USART_receive( void )
{
	// Wait for data to be received
	while ( !(UCSRA & (1<<RXC)) )
     b60:	5f 9b       	sbis	0x0b, 7	; 11
     b62:	fe cf       	rjmp	.-4      	; 0xb60 <USART_receive>
	;
	// Get and return received data from buffer
	return UDR;
     b64:	8c b1       	in	r24, 0x0c	; 12
}
     b66:	08 95       	ret

00000b68 <USART_Transmit_string>:

void USART_Transmit_string (char * str)
{
     b68:	0f 93       	push	r16
     b6a:	1f 93       	push	r17
     b6c:	cf 93       	push	r28
     b6e:	fc 01       	movw	r30, r24
	uint8_t i =0 ;
	while(str[i]!=0)
     b70:	80 81       	ld	r24, Z
     b72:	88 23       	and	r24, r24
     b74:	59 f0       	breq	.+22     	; 0xb8c <USART_Transmit_string+0x24>
     b76:	8f 01       	movw	r16, r30
     b78:	c0 e0       	ldi	r28, 0x00	; 0
	{ USART_transmit(str[i]); i++;}
     b7a:	0e 94 ac 05 	call	0xb58	; 0xb58 <USART_transmit>
     b7e:	cf 5f       	subi	r28, 0xFF	; 255
}

void USART_Transmit_string (char * str)
{
	uint8_t i =0 ;
	while(str[i]!=0)
     b80:	f8 01       	movw	r30, r16
     b82:	ec 0f       	add	r30, r28
     b84:	f1 1d       	adc	r31, r1
     b86:	80 81       	ld	r24, Z
     b88:	81 11       	cpse	r24, r1
     b8a:	f7 cf       	rjmp	.-18     	; 0xb7a <USART_Transmit_string+0x12>
	{ USART_transmit(str[i]); i++;}
	
}
     b8c:	cf 91       	pop	r28
     b8e:	1f 91       	pop	r17
     b90:	0f 91       	pop	r16
     b92:	08 95       	ret

00000b94 <USART_receive_string>:
char * USART_receive_string (uint8_t *string)  //Receive a character until carriage return or newline

{
     b94:	0f 93       	push	r16
     b96:	1f 93       	push	r17
     b98:	cf 93       	push	r28
     b9a:	8c 01       	movw	r16, r24

	uint8_t  i=0,char_input=0;
     b9c:	c0 e0       	ldi	r28, 0x00	; 0
     b9e:	01 c0       	rjmp	.+2      	; 0xba2 <USART_receive_string+0xe>

		*(string+i)= USART_receive();

		char_input = *(string+i);

		i++;
     ba0:	c9 2f       	mov	r28, r25

	do

	{

		*(string+i)= USART_receive();
     ba2:	0e 94 b0 05 	call	0xb60	; 0xb60 <USART_receive>
     ba6:	f8 01       	movw	r30, r16
     ba8:	ec 0f       	add	r30, r28
     baa:	f1 1d       	adc	r31, r1
     bac:	80 83       	st	Z, r24

		char_input = *(string+i);

		i++;
     bae:	91 e0       	ldi	r25, 0x01	; 1
     bb0:	9c 0f       	add	r25, r28

	}while((char_input!='\n') && (char_input!='\r'));
     bb2:	8a 30       	cpi	r24, 0x0A	; 10
     bb4:	11 f0       	breq	.+4      	; 0xbba <USART_receive_string+0x26>
     bb6:	8d 30       	cpi	r24, 0x0D	; 13
     bb8:	99 f7       	brne	.-26     	; 0xba0 <USART_receive_string+0xc>
	
	i++;
	*(string+i) = '\0';
     bba:	ce 5f       	subi	r28, 0xFE	; 254
     bbc:	f8 01       	movw	r30, r16
     bbe:	ec 0f       	add	r30, r28
     bc0:	f1 1d       	adc	r31, r1
     bc2:	10 82       	st	Z, r1
		int u=0;
		while ((*(string+u)) !=0) u++;
     bc4:	f8 01       	movw	r30, r16
     bc6:	80 81       	ld	r24, Z
     bc8:	88 23       	and	r24, r24
     bca:	49 f0       	breq	.+18     	; 0xbde <USART_receive_string+0x4a>
     bcc:	31 96       	adiw	r30, 0x01	; 1
     bce:	80 e0       	ldi	r24, 0x00	; 0
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	01 96       	adiw	r24, 0x01	; 1
     bd4:	ac 01       	movw	r20, r24
     bd6:	21 91       	ld	r18, Z+
     bd8:	21 11       	cpse	r18, r1
     bda:	fb cf       	rjmp	.-10     	; 0xbd2 <USART_receive_string+0x3e>
     bdc:	02 c0       	rjmp	.+4      	; 0xbe2 <USART_receive_string+0x4e>
     bde:	40 e0       	ldi	r20, 0x00	; 0
     be0:	50 e0       	ldi	r21, 0x00	; 0
		*(string+(u-1))=0;
     be2:	40 0f       	add	r20, r16
     be4:	51 1f       	adc	r21, r17
     be6:	fa 01       	movw	r30, r20
     be8:	31 97       	sbiw	r30, 0x01	; 1
     bea:	10 82       	st	Z, r1
	return string;

     bec:	c8 01       	movw	r24, r16
     bee:	cf 91       	pop	r28
     bf0:	1f 91       	pop	r17
     bf2:	0f 91       	pop	r16
     bf4:	08 95       	ret

00000bf6 <__udivmodsi4>:
     bf6:	a1 e2       	ldi	r26, 0x21	; 33
     bf8:	1a 2e       	mov	r1, r26
     bfa:	aa 1b       	sub	r26, r26
     bfc:	bb 1b       	sub	r27, r27
     bfe:	fd 01       	movw	r30, r26
     c00:	0d c0       	rjmp	.+26     	; 0xc1c <__udivmodsi4_ep>

00000c02 <__udivmodsi4_loop>:
     c02:	aa 1f       	adc	r26, r26
     c04:	bb 1f       	adc	r27, r27
     c06:	ee 1f       	adc	r30, r30
     c08:	ff 1f       	adc	r31, r31
     c0a:	a2 17       	cp	r26, r18
     c0c:	b3 07       	cpc	r27, r19
     c0e:	e4 07       	cpc	r30, r20
     c10:	f5 07       	cpc	r31, r21
     c12:	20 f0       	brcs	.+8      	; 0xc1c <__udivmodsi4_ep>
     c14:	a2 1b       	sub	r26, r18
     c16:	b3 0b       	sbc	r27, r19
     c18:	e4 0b       	sbc	r30, r20
     c1a:	f5 0b       	sbc	r31, r21

00000c1c <__udivmodsi4_ep>:
     c1c:	66 1f       	adc	r22, r22
     c1e:	77 1f       	adc	r23, r23
     c20:	88 1f       	adc	r24, r24
     c22:	99 1f       	adc	r25, r25
     c24:	1a 94       	dec	r1
     c26:	69 f7       	brne	.-38     	; 0xc02 <__udivmodsi4_loop>
     c28:	60 95       	com	r22
     c2a:	70 95       	com	r23
     c2c:	80 95       	com	r24
     c2e:	90 95       	com	r25
     c30:	9b 01       	movw	r18, r22
     c32:	ac 01       	movw	r20, r24
     c34:	bd 01       	movw	r22, r26
     c36:	cf 01       	movw	r24, r30
     c38:	08 95       	ret

00000c3a <__subsf3>:
     c3a:	50 58       	subi	r21, 0x80	; 128

00000c3c <__addsf3>:
     c3c:	bb 27       	eor	r27, r27
     c3e:	aa 27       	eor	r26, r26
     c40:	0e 94 35 06 	call	0xc6a	; 0xc6a <__addsf3x>
     c44:	0c 94 8d 07 	jmp	0xf1a	; 0xf1a <__fp_round>
     c48:	0e 94 7f 07 	call	0xefe	; 0xefe <__fp_pscA>
     c4c:	38 f0       	brcs	.+14     	; 0xc5c <__addsf3+0x20>
     c4e:	0e 94 86 07 	call	0xf0c	; 0xf0c <__fp_pscB>
     c52:	20 f0       	brcs	.+8      	; 0xc5c <__addsf3+0x20>
     c54:	39 f4       	brne	.+14     	; 0xc64 <__addsf3+0x28>
     c56:	9f 3f       	cpi	r25, 0xFF	; 255
     c58:	19 f4       	brne	.+6      	; 0xc60 <__addsf3+0x24>
     c5a:	26 f4       	brtc	.+8      	; 0xc64 <__addsf3+0x28>
     c5c:	0c 94 7c 07 	jmp	0xef8	; 0xef8 <__fp_nan>
     c60:	0e f4       	brtc	.+2      	; 0xc64 <__addsf3+0x28>
     c62:	e0 95       	com	r30
     c64:	e7 fb       	bst	r30, 7
     c66:	0c 94 68 07 	jmp	0xed0	; 0xed0 <__fp_inf>

00000c6a <__addsf3x>:
     c6a:	e9 2f       	mov	r30, r25
     c6c:	0e 94 9e 07 	call	0xf3c	; 0xf3c <__fp_split3>
     c70:	58 f3       	brcs	.-42     	; 0xc48 <__addsf3+0xc>
     c72:	ba 17       	cp	r27, r26
     c74:	62 07       	cpc	r22, r18
     c76:	73 07       	cpc	r23, r19
     c78:	84 07       	cpc	r24, r20
     c7a:	95 07       	cpc	r25, r21
     c7c:	20 f0       	brcs	.+8      	; 0xc86 <__addsf3x+0x1c>
     c7e:	79 f4       	brne	.+30     	; 0xc9e <__addsf3x+0x34>
     c80:	a6 f5       	brtc	.+104    	; 0xcea <__addsf3x+0x80>
     c82:	0c 94 c0 07 	jmp	0xf80	; 0xf80 <__fp_zero>
     c86:	0e f4       	brtc	.+2      	; 0xc8a <__addsf3x+0x20>
     c88:	e0 95       	com	r30
     c8a:	0b 2e       	mov	r0, r27
     c8c:	ba 2f       	mov	r27, r26
     c8e:	a0 2d       	mov	r26, r0
     c90:	0b 01       	movw	r0, r22
     c92:	b9 01       	movw	r22, r18
     c94:	90 01       	movw	r18, r0
     c96:	0c 01       	movw	r0, r24
     c98:	ca 01       	movw	r24, r20
     c9a:	a0 01       	movw	r20, r0
     c9c:	11 24       	eor	r1, r1
     c9e:	ff 27       	eor	r31, r31
     ca0:	59 1b       	sub	r21, r25
     ca2:	99 f0       	breq	.+38     	; 0xcca <__addsf3x+0x60>
     ca4:	59 3f       	cpi	r21, 0xF9	; 249
     ca6:	50 f4       	brcc	.+20     	; 0xcbc <__addsf3x+0x52>
     ca8:	50 3e       	cpi	r21, 0xE0	; 224
     caa:	68 f1       	brcs	.+90     	; 0xd06 <__addsf3x+0x9c>
     cac:	1a 16       	cp	r1, r26
     cae:	f0 40       	sbci	r31, 0x00	; 0
     cb0:	a2 2f       	mov	r26, r18
     cb2:	23 2f       	mov	r18, r19
     cb4:	34 2f       	mov	r19, r20
     cb6:	44 27       	eor	r20, r20
     cb8:	58 5f       	subi	r21, 0xF8	; 248
     cba:	f3 cf       	rjmp	.-26     	; 0xca2 <__addsf3x+0x38>
     cbc:	46 95       	lsr	r20
     cbe:	37 95       	ror	r19
     cc0:	27 95       	ror	r18
     cc2:	a7 95       	ror	r26
     cc4:	f0 40       	sbci	r31, 0x00	; 0
     cc6:	53 95       	inc	r21
     cc8:	c9 f7       	brne	.-14     	; 0xcbc <__addsf3x+0x52>
     cca:	7e f4       	brtc	.+30     	; 0xcea <__addsf3x+0x80>
     ccc:	1f 16       	cp	r1, r31
     cce:	ba 0b       	sbc	r27, r26
     cd0:	62 0b       	sbc	r22, r18
     cd2:	73 0b       	sbc	r23, r19
     cd4:	84 0b       	sbc	r24, r20
     cd6:	ba f0       	brmi	.+46     	; 0xd06 <__addsf3x+0x9c>
     cd8:	91 50       	subi	r25, 0x01	; 1
     cda:	a1 f0       	breq	.+40     	; 0xd04 <__addsf3x+0x9a>
     cdc:	ff 0f       	add	r31, r31
     cde:	bb 1f       	adc	r27, r27
     ce0:	66 1f       	adc	r22, r22
     ce2:	77 1f       	adc	r23, r23
     ce4:	88 1f       	adc	r24, r24
     ce6:	c2 f7       	brpl	.-16     	; 0xcd8 <__addsf3x+0x6e>
     ce8:	0e c0       	rjmp	.+28     	; 0xd06 <__addsf3x+0x9c>
     cea:	ba 0f       	add	r27, r26
     cec:	62 1f       	adc	r22, r18
     cee:	73 1f       	adc	r23, r19
     cf0:	84 1f       	adc	r24, r20
     cf2:	48 f4       	brcc	.+18     	; 0xd06 <__addsf3x+0x9c>
     cf4:	87 95       	ror	r24
     cf6:	77 95       	ror	r23
     cf8:	67 95       	ror	r22
     cfa:	b7 95       	ror	r27
     cfc:	f7 95       	ror	r31
     cfe:	9e 3f       	cpi	r25, 0xFE	; 254
     d00:	08 f0       	brcs	.+2      	; 0xd04 <__addsf3x+0x9a>
     d02:	b0 cf       	rjmp	.-160    	; 0xc64 <__addsf3+0x28>
     d04:	93 95       	inc	r25
     d06:	88 0f       	add	r24, r24
     d08:	08 f0       	brcs	.+2      	; 0xd0c <__addsf3x+0xa2>
     d0a:	99 27       	eor	r25, r25
     d0c:	ee 0f       	add	r30, r30
     d0e:	97 95       	ror	r25
     d10:	87 95       	ror	r24
     d12:	08 95       	ret

00000d14 <__divsf3>:
     d14:	0e 94 9e 06 	call	0xd3c	; 0xd3c <__divsf3x>
     d18:	0c 94 8d 07 	jmp	0xf1a	; 0xf1a <__fp_round>
     d1c:	0e 94 86 07 	call	0xf0c	; 0xf0c <__fp_pscB>
     d20:	58 f0       	brcs	.+22     	; 0xd38 <__divsf3+0x24>
     d22:	0e 94 7f 07 	call	0xefe	; 0xefe <__fp_pscA>
     d26:	40 f0       	brcs	.+16     	; 0xd38 <__divsf3+0x24>
     d28:	29 f4       	brne	.+10     	; 0xd34 <__divsf3+0x20>
     d2a:	5f 3f       	cpi	r21, 0xFF	; 255
     d2c:	29 f0       	breq	.+10     	; 0xd38 <__divsf3+0x24>
     d2e:	0c 94 68 07 	jmp	0xed0	; 0xed0 <__fp_inf>
     d32:	51 11       	cpse	r21, r1
     d34:	0c 94 c1 07 	jmp	0xf82	; 0xf82 <__fp_szero>
     d38:	0c 94 7c 07 	jmp	0xef8	; 0xef8 <__fp_nan>

00000d3c <__divsf3x>:
     d3c:	0e 94 9e 07 	call	0xf3c	; 0xf3c <__fp_split3>
     d40:	68 f3       	brcs	.-38     	; 0xd1c <__divsf3+0x8>

00000d42 <__divsf3_pse>:
     d42:	99 23       	and	r25, r25
     d44:	b1 f3       	breq	.-20     	; 0xd32 <__divsf3+0x1e>
     d46:	55 23       	and	r21, r21
     d48:	91 f3       	breq	.-28     	; 0xd2e <__divsf3+0x1a>
     d4a:	95 1b       	sub	r25, r21
     d4c:	55 0b       	sbc	r21, r21
     d4e:	bb 27       	eor	r27, r27
     d50:	aa 27       	eor	r26, r26
     d52:	62 17       	cp	r22, r18
     d54:	73 07       	cpc	r23, r19
     d56:	84 07       	cpc	r24, r20
     d58:	38 f0       	brcs	.+14     	; 0xd68 <__divsf3_pse+0x26>
     d5a:	9f 5f       	subi	r25, 0xFF	; 255
     d5c:	5f 4f       	sbci	r21, 0xFF	; 255
     d5e:	22 0f       	add	r18, r18
     d60:	33 1f       	adc	r19, r19
     d62:	44 1f       	adc	r20, r20
     d64:	aa 1f       	adc	r26, r26
     d66:	a9 f3       	breq	.-22     	; 0xd52 <__divsf3_pse+0x10>
     d68:	35 d0       	rcall	.+106    	; 0xdd4 <__divsf3_pse+0x92>
     d6a:	0e 2e       	mov	r0, r30
     d6c:	3a f0       	brmi	.+14     	; 0xd7c <__divsf3_pse+0x3a>
     d6e:	e0 e8       	ldi	r30, 0x80	; 128
     d70:	32 d0       	rcall	.+100    	; 0xdd6 <__divsf3_pse+0x94>
     d72:	91 50       	subi	r25, 0x01	; 1
     d74:	50 40       	sbci	r21, 0x00	; 0
     d76:	e6 95       	lsr	r30
     d78:	00 1c       	adc	r0, r0
     d7a:	ca f7       	brpl	.-14     	; 0xd6e <__divsf3_pse+0x2c>
     d7c:	2b d0       	rcall	.+86     	; 0xdd4 <__divsf3_pse+0x92>
     d7e:	fe 2f       	mov	r31, r30
     d80:	29 d0       	rcall	.+82     	; 0xdd4 <__divsf3_pse+0x92>
     d82:	66 0f       	add	r22, r22
     d84:	77 1f       	adc	r23, r23
     d86:	88 1f       	adc	r24, r24
     d88:	bb 1f       	adc	r27, r27
     d8a:	26 17       	cp	r18, r22
     d8c:	37 07       	cpc	r19, r23
     d8e:	48 07       	cpc	r20, r24
     d90:	ab 07       	cpc	r26, r27
     d92:	b0 e8       	ldi	r27, 0x80	; 128
     d94:	09 f0       	breq	.+2      	; 0xd98 <__divsf3_pse+0x56>
     d96:	bb 0b       	sbc	r27, r27
     d98:	80 2d       	mov	r24, r0
     d9a:	bf 01       	movw	r22, r30
     d9c:	ff 27       	eor	r31, r31
     d9e:	93 58       	subi	r25, 0x83	; 131
     da0:	5f 4f       	sbci	r21, 0xFF	; 255
     da2:	3a f0       	brmi	.+14     	; 0xdb2 <__divsf3_pse+0x70>
     da4:	9e 3f       	cpi	r25, 0xFE	; 254
     da6:	51 05       	cpc	r21, r1
     da8:	78 f0       	brcs	.+30     	; 0xdc8 <__divsf3_pse+0x86>
     daa:	0c 94 68 07 	jmp	0xed0	; 0xed0 <__fp_inf>
     dae:	0c 94 c1 07 	jmp	0xf82	; 0xf82 <__fp_szero>
     db2:	5f 3f       	cpi	r21, 0xFF	; 255
     db4:	e4 f3       	brlt	.-8      	; 0xdae <__divsf3_pse+0x6c>
     db6:	98 3e       	cpi	r25, 0xE8	; 232
     db8:	d4 f3       	brlt	.-12     	; 0xdae <__divsf3_pse+0x6c>
     dba:	86 95       	lsr	r24
     dbc:	77 95       	ror	r23
     dbe:	67 95       	ror	r22
     dc0:	b7 95       	ror	r27
     dc2:	f7 95       	ror	r31
     dc4:	9f 5f       	subi	r25, 0xFF	; 255
     dc6:	c9 f7       	brne	.-14     	; 0xdba <__divsf3_pse+0x78>
     dc8:	88 0f       	add	r24, r24
     dca:	91 1d       	adc	r25, r1
     dcc:	96 95       	lsr	r25
     dce:	87 95       	ror	r24
     dd0:	97 f9       	bld	r25, 7
     dd2:	08 95       	ret
     dd4:	e1 e0       	ldi	r30, 0x01	; 1
     dd6:	66 0f       	add	r22, r22
     dd8:	77 1f       	adc	r23, r23
     dda:	88 1f       	adc	r24, r24
     ddc:	bb 1f       	adc	r27, r27
     dde:	62 17       	cp	r22, r18
     de0:	73 07       	cpc	r23, r19
     de2:	84 07       	cpc	r24, r20
     de4:	ba 07       	cpc	r27, r26
     de6:	20 f0       	brcs	.+8      	; 0xdf0 <__divsf3_pse+0xae>
     de8:	62 1b       	sub	r22, r18
     dea:	73 0b       	sbc	r23, r19
     dec:	84 0b       	sbc	r24, r20
     dee:	ba 0b       	sbc	r27, r26
     df0:	ee 1f       	adc	r30, r30
     df2:	88 f7       	brcc	.-30     	; 0xdd6 <__divsf3_pse+0x94>
     df4:	e0 95       	com	r30
     df6:	08 95       	ret

00000df8 <__fixunssfsi>:
     df8:	0e 94 a6 07 	call	0xf4c	; 0xf4c <__fp_splitA>
     dfc:	88 f0       	brcs	.+34     	; 0xe20 <__fixunssfsi+0x28>
     dfe:	9f 57       	subi	r25, 0x7F	; 127
     e00:	98 f0       	brcs	.+38     	; 0xe28 <__fixunssfsi+0x30>
     e02:	b9 2f       	mov	r27, r25
     e04:	99 27       	eor	r25, r25
     e06:	b7 51       	subi	r27, 0x17	; 23
     e08:	b0 f0       	brcs	.+44     	; 0xe36 <__fixunssfsi+0x3e>
     e0a:	e1 f0       	breq	.+56     	; 0xe44 <__fixunssfsi+0x4c>
     e0c:	66 0f       	add	r22, r22
     e0e:	77 1f       	adc	r23, r23
     e10:	88 1f       	adc	r24, r24
     e12:	99 1f       	adc	r25, r25
     e14:	1a f0       	brmi	.+6      	; 0xe1c <__fixunssfsi+0x24>
     e16:	ba 95       	dec	r27
     e18:	c9 f7       	brne	.-14     	; 0xe0c <__fixunssfsi+0x14>
     e1a:	14 c0       	rjmp	.+40     	; 0xe44 <__fixunssfsi+0x4c>
     e1c:	b1 30       	cpi	r27, 0x01	; 1
     e1e:	91 f0       	breq	.+36     	; 0xe44 <__fixunssfsi+0x4c>
     e20:	0e 94 c0 07 	call	0xf80	; 0xf80 <__fp_zero>
     e24:	b1 e0       	ldi	r27, 0x01	; 1
     e26:	08 95       	ret
     e28:	0c 94 c0 07 	jmp	0xf80	; 0xf80 <__fp_zero>
     e2c:	67 2f       	mov	r22, r23
     e2e:	78 2f       	mov	r23, r24
     e30:	88 27       	eor	r24, r24
     e32:	b8 5f       	subi	r27, 0xF8	; 248
     e34:	39 f0       	breq	.+14     	; 0xe44 <__fixunssfsi+0x4c>
     e36:	b9 3f       	cpi	r27, 0xF9	; 249
     e38:	cc f3       	brlt	.-14     	; 0xe2c <__fixunssfsi+0x34>
     e3a:	86 95       	lsr	r24
     e3c:	77 95       	ror	r23
     e3e:	67 95       	ror	r22
     e40:	b3 95       	inc	r27
     e42:	d9 f7       	brne	.-10     	; 0xe3a <__fixunssfsi+0x42>
     e44:	3e f4       	brtc	.+14     	; 0xe54 <__fixunssfsi+0x5c>
     e46:	90 95       	com	r25
     e48:	80 95       	com	r24
     e4a:	70 95       	com	r23
     e4c:	61 95       	neg	r22
     e4e:	7f 4f       	sbci	r23, 0xFF	; 255
     e50:	8f 4f       	sbci	r24, 0xFF	; 255
     e52:	9f 4f       	sbci	r25, 0xFF	; 255
     e54:	08 95       	ret

00000e56 <__floatunsisf>:
     e56:	e8 94       	clt
     e58:	09 c0       	rjmp	.+18     	; 0xe6c <__floatsisf+0x12>

00000e5a <__floatsisf>:
     e5a:	97 fb       	bst	r25, 7
     e5c:	3e f4       	brtc	.+14     	; 0xe6c <__floatsisf+0x12>
     e5e:	90 95       	com	r25
     e60:	80 95       	com	r24
     e62:	70 95       	com	r23
     e64:	61 95       	neg	r22
     e66:	7f 4f       	sbci	r23, 0xFF	; 255
     e68:	8f 4f       	sbci	r24, 0xFF	; 255
     e6a:	9f 4f       	sbci	r25, 0xFF	; 255
     e6c:	99 23       	and	r25, r25
     e6e:	a9 f0       	breq	.+42     	; 0xe9a <__floatsisf+0x40>
     e70:	f9 2f       	mov	r31, r25
     e72:	96 e9       	ldi	r25, 0x96	; 150
     e74:	bb 27       	eor	r27, r27
     e76:	93 95       	inc	r25
     e78:	f6 95       	lsr	r31
     e7a:	87 95       	ror	r24
     e7c:	77 95       	ror	r23
     e7e:	67 95       	ror	r22
     e80:	b7 95       	ror	r27
     e82:	f1 11       	cpse	r31, r1
     e84:	f8 cf       	rjmp	.-16     	; 0xe76 <__floatsisf+0x1c>
     e86:	fa f4       	brpl	.+62     	; 0xec6 <__floatsisf+0x6c>
     e88:	bb 0f       	add	r27, r27
     e8a:	11 f4       	brne	.+4      	; 0xe90 <__floatsisf+0x36>
     e8c:	60 ff       	sbrs	r22, 0
     e8e:	1b c0       	rjmp	.+54     	; 0xec6 <__floatsisf+0x6c>
     e90:	6f 5f       	subi	r22, 0xFF	; 255
     e92:	7f 4f       	sbci	r23, 0xFF	; 255
     e94:	8f 4f       	sbci	r24, 0xFF	; 255
     e96:	9f 4f       	sbci	r25, 0xFF	; 255
     e98:	16 c0       	rjmp	.+44     	; 0xec6 <__floatsisf+0x6c>
     e9a:	88 23       	and	r24, r24
     e9c:	11 f0       	breq	.+4      	; 0xea2 <__floatsisf+0x48>
     e9e:	96 e9       	ldi	r25, 0x96	; 150
     ea0:	11 c0       	rjmp	.+34     	; 0xec4 <__floatsisf+0x6a>
     ea2:	77 23       	and	r23, r23
     ea4:	21 f0       	breq	.+8      	; 0xeae <__floatsisf+0x54>
     ea6:	9e e8       	ldi	r25, 0x8E	; 142
     ea8:	87 2f       	mov	r24, r23
     eaa:	76 2f       	mov	r23, r22
     eac:	05 c0       	rjmp	.+10     	; 0xeb8 <__floatsisf+0x5e>
     eae:	66 23       	and	r22, r22
     eb0:	71 f0       	breq	.+28     	; 0xece <__floatsisf+0x74>
     eb2:	96 e8       	ldi	r25, 0x86	; 134
     eb4:	86 2f       	mov	r24, r22
     eb6:	70 e0       	ldi	r23, 0x00	; 0
     eb8:	60 e0       	ldi	r22, 0x00	; 0
     eba:	2a f0       	brmi	.+10     	; 0xec6 <__floatsisf+0x6c>
     ebc:	9a 95       	dec	r25
     ebe:	66 0f       	add	r22, r22
     ec0:	77 1f       	adc	r23, r23
     ec2:	88 1f       	adc	r24, r24
     ec4:	da f7       	brpl	.-10     	; 0xebc <__floatsisf+0x62>
     ec6:	88 0f       	add	r24, r24
     ec8:	96 95       	lsr	r25
     eca:	87 95       	ror	r24
     ecc:	97 f9       	bld	r25, 7
     ece:	08 95       	ret

00000ed0 <__fp_inf>:
     ed0:	97 f9       	bld	r25, 7
     ed2:	9f 67       	ori	r25, 0x7F	; 127
     ed4:	80 e8       	ldi	r24, 0x80	; 128
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	60 e0       	ldi	r22, 0x00	; 0
     eda:	08 95       	ret

00000edc <__fp_mpack>:
     edc:	9f 3f       	cpi	r25, 0xFF	; 255
     ede:	31 f0       	breq	.+12     	; 0xeec <__fp_mpack_finite+0xc>

00000ee0 <__fp_mpack_finite>:
     ee0:	91 50       	subi	r25, 0x01	; 1
     ee2:	20 f4       	brcc	.+8      	; 0xeec <__fp_mpack_finite+0xc>
     ee4:	87 95       	ror	r24
     ee6:	77 95       	ror	r23
     ee8:	67 95       	ror	r22
     eea:	b7 95       	ror	r27
     eec:	88 0f       	add	r24, r24
     eee:	91 1d       	adc	r25, r1
     ef0:	96 95       	lsr	r25
     ef2:	87 95       	ror	r24
     ef4:	97 f9       	bld	r25, 7
     ef6:	08 95       	ret

00000ef8 <__fp_nan>:
     ef8:	9f ef       	ldi	r25, 0xFF	; 255
     efa:	80 ec       	ldi	r24, 0xC0	; 192
     efc:	08 95       	ret

00000efe <__fp_pscA>:
     efe:	00 24       	eor	r0, r0
     f00:	0a 94       	dec	r0
     f02:	16 16       	cp	r1, r22
     f04:	17 06       	cpc	r1, r23
     f06:	18 06       	cpc	r1, r24
     f08:	09 06       	cpc	r0, r25
     f0a:	08 95       	ret

00000f0c <__fp_pscB>:
     f0c:	00 24       	eor	r0, r0
     f0e:	0a 94       	dec	r0
     f10:	12 16       	cp	r1, r18
     f12:	13 06       	cpc	r1, r19
     f14:	14 06       	cpc	r1, r20
     f16:	05 06       	cpc	r0, r21
     f18:	08 95       	ret

00000f1a <__fp_round>:
     f1a:	09 2e       	mov	r0, r25
     f1c:	03 94       	inc	r0
     f1e:	00 0c       	add	r0, r0
     f20:	11 f4       	brne	.+4      	; 0xf26 <__fp_round+0xc>
     f22:	88 23       	and	r24, r24
     f24:	52 f0       	brmi	.+20     	; 0xf3a <__fp_round+0x20>
     f26:	bb 0f       	add	r27, r27
     f28:	40 f4       	brcc	.+16     	; 0xf3a <__fp_round+0x20>
     f2a:	bf 2b       	or	r27, r31
     f2c:	11 f4       	brne	.+4      	; 0xf32 <__fp_round+0x18>
     f2e:	60 ff       	sbrs	r22, 0
     f30:	04 c0       	rjmp	.+8      	; 0xf3a <__fp_round+0x20>
     f32:	6f 5f       	subi	r22, 0xFF	; 255
     f34:	7f 4f       	sbci	r23, 0xFF	; 255
     f36:	8f 4f       	sbci	r24, 0xFF	; 255
     f38:	9f 4f       	sbci	r25, 0xFF	; 255
     f3a:	08 95       	ret

00000f3c <__fp_split3>:
     f3c:	57 fd       	sbrc	r21, 7
     f3e:	90 58       	subi	r25, 0x80	; 128
     f40:	44 0f       	add	r20, r20
     f42:	55 1f       	adc	r21, r21
     f44:	59 f0       	breq	.+22     	; 0xf5c <__fp_splitA+0x10>
     f46:	5f 3f       	cpi	r21, 0xFF	; 255
     f48:	71 f0       	breq	.+28     	; 0xf66 <__fp_splitA+0x1a>
     f4a:	47 95       	ror	r20

00000f4c <__fp_splitA>:
     f4c:	88 0f       	add	r24, r24
     f4e:	97 fb       	bst	r25, 7
     f50:	99 1f       	adc	r25, r25
     f52:	61 f0       	breq	.+24     	; 0xf6c <__fp_splitA+0x20>
     f54:	9f 3f       	cpi	r25, 0xFF	; 255
     f56:	79 f0       	breq	.+30     	; 0xf76 <__fp_splitA+0x2a>
     f58:	87 95       	ror	r24
     f5a:	08 95       	ret
     f5c:	12 16       	cp	r1, r18
     f5e:	13 06       	cpc	r1, r19
     f60:	14 06       	cpc	r1, r20
     f62:	55 1f       	adc	r21, r21
     f64:	f2 cf       	rjmp	.-28     	; 0xf4a <__fp_split3+0xe>
     f66:	46 95       	lsr	r20
     f68:	f1 df       	rcall	.-30     	; 0xf4c <__fp_splitA>
     f6a:	08 c0       	rjmp	.+16     	; 0xf7c <__fp_splitA+0x30>
     f6c:	16 16       	cp	r1, r22
     f6e:	17 06       	cpc	r1, r23
     f70:	18 06       	cpc	r1, r24
     f72:	99 1f       	adc	r25, r25
     f74:	f1 cf       	rjmp	.-30     	; 0xf58 <__fp_splitA+0xc>
     f76:	86 95       	lsr	r24
     f78:	71 05       	cpc	r23, r1
     f7a:	61 05       	cpc	r22, r1
     f7c:	08 94       	sec
     f7e:	08 95       	ret

00000f80 <__fp_zero>:
     f80:	e8 94       	clt

00000f82 <__fp_szero>:
     f82:	bb 27       	eor	r27, r27
     f84:	66 27       	eor	r22, r22
     f86:	77 27       	eor	r23, r23
     f88:	cb 01       	movw	r24, r22
     f8a:	97 f9       	bld	r25, 7
     f8c:	08 95       	ret

00000f8e <pow>:
     f8e:	fa 01       	movw	r30, r20
     f90:	ee 0f       	add	r30, r30
     f92:	ff 1f       	adc	r31, r31
     f94:	30 96       	adiw	r30, 0x00	; 0
     f96:	21 05       	cpc	r18, r1
     f98:	31 05       	cpc	r19, r1
     f9a:	a1 f1       	breq	.+104    	; 0x1004 <pow+0x76>
     f9c:	61 15       	cp	r22, r1
     f9e:	71 05       	cpc	r23, r1
     fa0:	61 f4       	brne	.+24     	; 0xfba <pow+0x2c>
     fa2:	80 38       	cpi	r24, 0x80	; 128
     fa4:	bf e3       	ldi	r27, 0x3F	; 63
     fa6:	9b 07       	cpc	r25, r27
     fa8:	49 f1       	breq	.+82     	; 0xffc <pow+0x6e>
     faa:	68 94       	set
     fac:	90 38       	cpi	r25, 0x80	; 128
     fae:	81 05       	cpc	r24, r1
     fb0:	61 f0       	breq	.+24     	; 0xfca <pow+0x3c>
     fb2:	80 38       	cpi	r24, 0x80	; 128
     fb4:	bf ef       	ldi	r27, 0xFF	; 255
     fb6:	9b 07       	cpc	r25, r27
     fb8:	41 f0       	breq	.+16     	; 0xfca <pow+0x3c>
     fba:	99 23       	and	r25, r25
     fbc:	4a f5       	brpl	.+82     	; 0x1010 <pow+0x82>
     fbe:	ff 3f       	cpi	r31, 0xFF	; 255
     fc0:	e1 05       	cpc	r30, r1
     fc2:	31 05       	cpc	r19, r1
     fc4:	21 05       	cpc	r18, r1
     fc6:	19 f1       	breq	.+70     	; 0x100e <pow+0x80>
     fc8:	e8 94       	clt
     fca:	08 94       	sec
     fcc:	e7 95       	ror	r30
     fce:	d9 01       	movw	r26, r18
     fd0:	aa 23       	and	r26, r26
     fd2:	29 f4       	brne	.+10     	; 0xfde <pow+0x50>
     fd4:	ab 2f       	mov	r26, r27
     fd6:	be 2f       	mov	r27, r30
     fd8:	f8 5f       	subi	r31, 0xF8	; 248
     fda:	d0 f3       	brcs	.-12     	; 0xfd0 <pow+0x42>
     fdc:	10 c0       	rjmp	.+32     	; 0xffe <pow+0x70>
     fde:	ff 5f       	subi	r31, 0xFF	; 255
     fe0:	70 f4       	brcc	.+28     	; 0xffe <pow+0x70>
     fe2:	a6 95       	lsr	r26
     fe4:	e0 f7       	brcc	.-8      	; 0xfde <pow+0x50>
     fe6:	f7 39       	cpi	r31, 0x97	; 151
     fe8:	50 f0       	brcs	.+20     	; 0xffe <pow+0x70>
     fea:	19 f0       	breq	.+6      	; 0xff2 <pow+0x64>
     fec:	ff 3a       	cpi	r31, 0xAF	; 175
     fee:	38 f4       	brcc	.+14     	; 0xffe <pow+0x70>
     ff0:	9f 77       	andi	r25, 0x7F	; 127
     ff2:	9f 93       	push	r25
     ff4:	0d d0       	rcall	.+26     	; 0x1010 <pow+0x82>
     ff6:	0f 90       	pop	r0
     ff8:	07 fc       	sbrc	r0, 7
     ffa:	90 58       	subi	r25, 0x80	; 128
     ffc:	08 95       	ret
     ffe:	46 f0       	brts	.+16     	; 0x1010 <pow+0x82>
    1000:	0c 94 7c 07 	jmp	0xef8	; 0xef8 <__fp_nan>
    1004:	60 e0       	ldi	r22, 0x00	; 0
    1006:	70 e0       	ldi	r23, 0x00	; 0
    1008:	80 e8       	ldi	r24, 0x80	; 128
    100a:	9f e3       	ldi	r25, 0x3F	; 63
    100c:	08 95       	ret
    100e:	4f e7       	ldi	r20, 0x7F	; 127
    1010:	9f 77       	andi	r25, 0x7F	; 127
    1012:	5f 93       	push	r21
    1014:	4f 93       	push	r20
    1016:	3f 93       	push	r19
    1018:	2f 93       	push	r18
    101a:	0e 94 c2 08 	call	0x1184	; 0x1184 <log>
    101e:	2f 91       	pop	r18
    1020:	3f 91       	pop	r19
    1022:	4f 91       	pop	r20
    1024:	5f 91       	pop	r21
    1026:	0e 94 3e 09 	call	0x127c	; 0x127c <__mulsf3>
    102a:	0c 94 1f 08 	jmp	0x103e	; 0x103e <exp>
    102e:	29 f4       	brne	.+10     	; 0x103a <pow+0xac>
    1030:	16 f0       	brts	.+4      	; 0x1036 <pow+0xa8>
    1032:	0c 94 68 07 	jmp	0xed0	; 0xed0 <__fp_inf>
    1036:	0c 94 c0 07 	jmp	0xf80	; 0xf80 <__fp_zero>
    103a:	0c 94 7c 07 	jmp	0xef8	; 0xef8 <__fp_nan>

0000103e <exp>:
    103e:	0e 94 a6 07 	call	0xf4c	; 0xf4c <__fp_splitA>
    1042:	a8 f3       	brcs	.-22     	; 0x102e <pow+0xa0>
    1044:	96 38       	cpi	r25, 0x86	; 134
    1046:	a0 f7       	brcc	.-24     	; 0x1030 <pow+0xa2>
    1048:	07 f8       	bld	r0, 7
    104a:	0f 92       	push	r0
    104c:	e8 94       	clt
    104e:	2b e3       	ldi	r18, 0x3B	; 59
    1050:	3a ea       	ldi	r19, 0xAA	; 170
    1052:	48 eb       	ldi	r20, 0xB8	; 184
    1054:	5f e7       	ldi	r21, 0x7F	; 127
    1056:	0e 94 54 09 	call	0x12a8	; 0x12a8 <__mulsf3_pse>
    105a:	0f 92       	push	r0
    105c:	0f 92       	push	r0
    105e:	0f 92       	push	r0
    1060:	4d b7       	in	r20, 0x3d	; 61
    1062:	5e b7       	in	r21, 0x3e	; 62
    1064:	0f 92       	push	r0
    1066:	0e 94 0a 09 	call	0x1214	; 0x1214 <modf>
    106a:	e4 e5       	ldi	r30, 0x54	; 84
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	0e 94 51 08 	call	0x10a2	; 0x10a2 <__fp_powser>
    1072:	4f 91       	pop	r20
    1074:	5f 91       	pop	r21
    1076:	ef 91       	pop	r30
    1078:	ff 91       	pop	r31
    107a:	e5 95       	asr	r30
    107c:	ee 1f       	adc	r30, r30
    107e:	ff 1f       	adc	r31, r31
    1080:	49 f0       	breq	.+18     	; 0x1094 <exp+0x56>
    1082:	fe 57       	subi	r31, 0x7E	; 126
    1084:	e0 68       	ori	r30, 0x80	; 128
    1086:	44 27       	eor	r20, r20
    1088:	ee 0f       	add	r30, r30
    108a:	44 1f       	adc	r20, r20
    108c:	fa 95       	dec	r31
    108e:	e1 f7       	brne	.-8      	; 0x1088 <exp+0x4a>
    1090:	41 95       	neg	r20
    1092:	55 0b       	sbc	r21, r21
    1094:	0e 94 84 08 	call	0x1108	; 0x1108 <ldexp>
    1098:	0f 90       	pop	r0
    109a:	07 fe       	sbrs	r0, 7
    109c:	0c 94 78 08 	jmp	0x10f0	; 0x10f0 <inverse>
    10a0:	08 95       	ret

000010a2 <__fp_powser>:
    10a2:	df 93       	push	r29
    10a4:	cf 93       	push	r28
    10a6:	1f 93       	push	r17
    10a8:	0f 93       	push	r16
    10aa:	ff 92       	push	r15
    10ac:	ef 92       	push	r14
    10ae:	df 92       	push	r13
    10b0:	7b 01       	movw	r14, r22
    10b2:	8c 01       	movw	r16, r24
    10b4:	68 94       	set
    10b6:	06 c0       	rjmp	.+12     	; 0x10c4 <__fp_powser+0x22>
    10b8:	da 2e       	mov	r13, r26
    10ba:	ef 01       	movw	r28, r30
    10bc:	0e 94 51 09 	call	0x12a2	; 0x12a2 <__mulsf3x>
    10c0:	fe 01       	movw	r30, r28
    10c2:	e8 94       	clt
    10c4:	a5 91       	lpm	r26, Z+
    10c6:	25 91       	lpm	r18, Z+
    10c8:	35 91       	lpm	r19, Z+
    10ca:	45 91       	lpm	r20, Z+
    10cc:	55 91       	lpm	r21, Z+
    10ce:	a6 f3       	brts	.-24     	; 0x10b8 <__fp_powser+0x16>
    10d0:	ef 01       	movw	r28, r30
    10d2:	0e 94 35 06 	call	0xc6a	; 0xc6a <__addsf3x>
    10d6:	fe 01       	movw	r30, r28
    10d8:	97 01       	movw	r18, r14
    10da:	a8 01       	movw	r20, r16
    10dc:	da 94       	dec	r13
    10de:	69 f7       	brne	.-38     	; 0x10ba <__fp_powser+0x18>
    10e0:	df 90       	pop	r13
    10e2:	ef 90       	pop	r14
    10e4:	ff 90       	pop	r15
    10e6:	0f 91       	pop	r16
    10e8:	1f 91       	pop	r17
    10ea:	cf 91       	pop	r28
    10ec:	df 91       	pop	r29
    10ee:	08 95       	ret

000010f0 <inverse>:
    10f0:	9b 01       	movw	r18, r22
    10f2:	ac 01       	movw	r20, r24
    10f4:	60 e0       	ldi	r22, 0x00	; 0
    10f6:	70 e0       	ldi	r23, 0x00	; 0
    10f8:	80 e8       	ldi	r24, 0x80	; 128
    10fa:	9f e3       	ldi	r25, 0x3F	; 63
    10fc:	0c 94 8a 06 	jmp	0xd14	; 0xd14 <__divsf3>
    1100:	0c 94 68 07 	jmp	0xed0	; 0xed0 <__fp_inf>
    1104:	0c 94 6e 07 	jmp	0xedc	; 0xedc <__fp_mpack>

00001108 <ldexp>:
    1108:	0e 94 a6 07 	call	0xf4c	; 0xf4c <__fp_splitA>
    110c:	d8 f3       	brcs	.-10     	; 0x1104 <inverse+0x14>
    110e:	99 23       	and	r25, r25
    1110:	c9 f3       	breq	.-14     	; 0x1104 <inverse+0x14>
    1112:	94 0f       	add	r25, r20
    1114:	51 1d       	adc	r21, r1
    1116:	a3 f3       	brvs	.-24     	; 0x1100 <inverse+0x10>
    1118:	91 50       	subi	r25, 0x01	; 1
    111a:	50 40       	sbci	r21, 0x00	; 0
    111c:	94 f0       	brlt	.+36     	; 0x1142 <ldexp+0x3a>
    111e:	59 f0       	breq	.+22     	; 0x1136 <ldexp+0x2e>
    1120:	88 23       	and	r24, r24
    1122:	32 f0       	brmi	.+12     	; 0x1130 <ldexp+0x28>
    1124:	66 0f       	add	r22, r22
    1126:	77 1f       	adc	r23, r23
    1128:	88 1f       	adc	r24, r24
    112a:	91 50       	subi	r25, 0x01	; 1
    112c:	50 40       	sbci	r21, 0x00	; 0
    112e:	c1 f7       	brne	.-16     	; 0x1120 <ldexp+0x18>
    1130:	9e 3f       	cpi	r25, 0xFE	; 254
    1132:	51 05       	cpc	r21, r1
    1134:	2c f7       	brge	.-54     	; 0x1100 <inverse+0x10>
    1136:	88 0f       	add	r24, r24
    1138:	91 1d       	adc	r25, r1
    113a:	96 95       	lsr	r25
    113c:	87 95       	ror	r24
    113e:	97 f9       	bld	r25, 7
    1140:	08 95       	ret
    1142:	5f 3f       	cpi	r21, 0xFF	; 255
    1144:	ac f0       	brlt	.+42     	; 0x1170 <ldexp+0x68>
    1146:	98 3e       	cpi	r25, 0xE8	; 232
    1148:	9c f0       	brlt	.+38     	; 0x1170 <ldexp+0x68>
    114a:	bb 27       	eor	r27, r27
    114c:	86 95       	lsr	r24
    114e:	77 95       	ror	r23
    1150:	67 95       	ror	r22
    1152:	b7 95       	ror	r27
    1154:	08 f4       	brcc	.+2      	; 0x1158 <ldexp+0x50>
    1156:	b1 60       	ori	r27, 0x01	; 1
    1158:	93 95       	inc	r25
    115a:	c1 f7       	brne	.-16     	; 0x114c <ldexp+0x44>
    115c:	bb 0f       	add	r27, r27
    115e:	58 f7       	brcc	.-42     	; 0x1136 <ldexp+0x2e>
    1160:	11 f4       	brne	.+4      	; 0x1166 <ldexp+0x5e>
    1162:	60 ff       	sbrs	r22, 0
    1164:	e8 cf       	rjmp	.-48     	; 0x1136 <ldexp+0x2e>
    1166:	6f 5f       	subi	r22, 0xFF	; 255
    1168:	7f 4f       	sbci	r23, 0xFF	; 255
    116a:	8f 4f       	sbci	r24, 0xFF	; 255
    116c:	9f 4f       	sbci	r25, 0xFF	; 255
    116e:	e3 cf       	rjmp	.-58     	; 0x1136 <ldexp+0x2e>
    1170:	0c 94 c1 07 	jmp	0xf82	; 0xf82 <__fp_szero>
    1174:	16 f0       	brts	.+4      	; 0x117a <ldexp+0x72>
    1176:	0c 94 6e 07 	jmp	0xedc	; 0xedc <__fp_mpack>
    117a:	0c 94 7c 07 	jmp	0xef8	; 0xef8 <__fp_nan>
    117e:	68 94       	set
    1180:	0c 94 68 07 	jmp	0xed0	; 0xed0 <__fp_inf>

00001184 <log>:
    1184:	0e 94 a6 07 	call	0xf4c	; 0xf4c <__fp_splitA>
    1188:	a8 f3       	brcs	.-22     	; 0x1174 <ldexp+0x6c>
    118a:	99 23       	and	r25, r25
    118c:	c1 f3       	breq	.-16     	; 0x117e <ldexp+0x76>
    118e:	ae f3       	brts	.-22     	; 0x117a <ldexp+0x72>
    1190:	df 93       	push	r29
    1192:	cf 93       	push	r28
    1194:	1f 93       	push	r17
    1196:	0f 93       	push	r16
    1198:	ff 92       	push	r15
    119a:	c9 2f       	mov	r28, r25
    119c:	dd 27       	eor	r29, r29
    119e:	88 23       	and	r24, r24
    11a0:	2a f0       	brmi	.+10     	; 0x11ac <log+0x28>
    11a2:	21 97       	sbiw	r28, 0x01	; 1
    11a4:	66 0f       	add	r22, r22
    11a6:	77 1f       	adc	r23, r23
    11a8:	88 1f       	adc	r24, r24
    11aa:	da f7       	brpl	.-10     	; 0x11a2 <log+0x1e>
    11ac:	20 e0       	ldi	r18, 0x00	; 0
    11ae:	30 e0       	ldi	r19, 0x00	; 0
    11b0:	40 e8       	ldi	r20, 0x80	; 128
    11b2:	5f eb       	ldi	r21, 0xBF	; 191
    11b4:	9f e3       	ldi	r25, 0x3F	; 63
    11b6:	88 39       	cpi	r24, 0x98	; 152
    11b8:	20 f0       	brcs	.+8      	; 0x11c2 <log+0x3e>
    11ba:	80 3e       	cpi	r24, 0xE0	; 224
    11bc:	38 f0       	brcs	.+14     	; 0x11cc <log+0x48>
    11be:	21 96       	adiw	r28, 0x01	; 1
    11c0:	8f 77       	andi	r24, 0x7F	; 127
    11c2:	0e 94 1e 06 	call	0xc3c	; 0xc3c <__addsf3>
    11c6:	ec e7       	ldi	r30, 0x7C	; 124
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	04 c0       	rjmp	.+8      	; 0x11d4 <log+0x50>
    11cc:	0e 94 1e 06 	call	0xc3c	; 0xc3c <__addsf3>
    11d0:	e9 ea       	ldi	r30, 0xA9	; 169
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	0e 94 51 08 	call	0x10a2	; 0x10a2 <__fp_powser>
    11d8:	8b 01       	movw	r16, r22
    11da:	be 01       	movw	r22, r28
    11dc:	ec 01       	movw	r28, r24
    11de:	fb 2e       	mov	r15, r27
    11e0:	6f 57       	subi	r22, 0x7F	; 127
    11e2:	71 09       	sbc	r23, r1
    11e4:	75 95       	asr	r23
    11e6:	77 1f       	adc	r23, r23
    11e8:	88 0b       	sbc	r24, r24
    11ea:	99 0b       	sbc	r25, r25
    11ec:	0e 94 2d 07 	call	0xe5a	; 0xe5a <__floatsisf>
    11f0:	28 e1       	ldi	r18, 0x18	; 24
    11f2:	32 e7       	ldi	r19, 0x72	; 114
    11f4:	41 e3       	ldi	r20, 0x31	; 49
    11f6:	5f e3       	ldi	r21, 0x3F	; 63
    11f8:	0e 94 51 09 	call	0x12a2	; 0x12a2 <__mulsf3x>
    11fc:	af 2d       	mov	r26, r15
    11fe:	98 01       	movw	r18, r16
    1200:	ae 01       	movw	r20, r28
    1202:	ff 90       	pop	r15
    1204:	0f 91       	pop	r16
    1206:	1f 91       	pop	r17
    1208:	cf 91       	pop	r28
    120a:	df 91       	pop	r29
    120c:	0e 94 35 06 	call	0xc6a	; 0xc6a <__addsf3x>
    1210:	0c 94 8d 07 	jmp	0xf1a	; 0xf1a <__fp_round>

00001214 <modf>:
    1214:	fa 01       	movw	r30, r20
    1216:	dc 01       	movw	r26, r24
    1218:	aa 0f       	add	r26, r26
    121a:	bb 1f       	adc	r27, r27
    121c:	9b 01       	movw	r18, r22
    121e:	ac 01       	movw	r20, r24
    1220:	bf 57       	subi	r27, 0x7F	; 127
    1222:	28 f4       	brcc	.+10     	; 0x122e <modf+0x1a>
    1224:	22 27       	eor	r18, r18
    1226:	33 27       	eor	r19, r19
    1228:	44 27       	eor	r20, r20
    122a:	50 78       	andi	r21, 0x80	; 128
    122c:	20 c0       	rjmp	.+64     	; 0x126e <modf+0x5a>
    122e:	b7 51       	subi	r27, 0x17	; 23
    1230:	90 f4       	brcc	.+36     	; 0x1256 <modf+0x42>
    1232:	ab 2f       	mov	r26, r27
    1234:	00 24       	eor	r0, r0
    1236:	46 95       	lsr	r20
    1238:	37 95       	ror	r19
    123a:	27 95       	ror	r18
    123c:	01 1c       	adc	r0, r1
    123e:	a3 95       	inc	r26
    1240:	d2 f3       	brmi	.-12     	; 0x1236 <modf+0x22>
    1242:	00 20       	and	r0, r0
    1244:	71 f0       	breq	.+28     	; 0x1262 <modf+0x4e>
    1246:	22 0f       	add	r18, r18
    1248:	33 1f       	adc	r19, r19
    124a:	44 1f       	adc	r20, r20
    124c:	b3 95       	inc	r27
    124e:	da f3       	brmi	.-10     	; 0x1246 <modf+0x32>
    1250:	0e d0       	rcall	.+28     	; 0x126e <modf+0x5a>
    1252:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__subsf3>
    1256:	61 30       	cpi	r22, 0x01	; 1
    1258:	71 05       	cpc	r23, r1
    125a:	a0 e8       	ldi	r26, 0x80	; 128
    125c:	8a 07       	cpc	r24, r26
    125e:	b9 46       	sbci	r27, 0x69	; 105
    1260:	30 f4       	brcc	.+12     	; 0x126e <modf+0x5a>
    1262:	9b 01       	movw	r18, r22
    1264:	ac 01       	movw	r20, r24
    1266:	66 27       	eor	r22, r22
    1268:	77 27       	eor	r23, r23
    126a:	88 27       	eor	r24, r24
    126c:	90 78       	andi	r25, 0x80	; 128
    126e:	30 96       	adiw	r30, 0x00	; 0
    1270:	21 f0       	breq	.+8      	; 0x127a <modf+0x66>
    1272:	20 83       	st	Z, r18
    1274:	31 83       	std	Z+1, r19	; 0x01
    1276:	42 83       	std	Z+2, r20	; 0x02
    1278:	53 83       	std	Z+3, r21	; 0x03
    127a:	08 95       	ret

0000127c <__mulsf3>:
    127c:	0e 94 51 09 	call	0x12a2	; 0x12a2 <__mulsf3x>
    1280:	0c 94 8d 07 	jmp	0xf1a	; 0xf1a <__fp_round>
    1284:	0e 94 7f 07 	call	0xefe	; 0xefe <__fp_pscA>
    1288:	38 f0       	brcs	.+14     	; 0x1298 <__mulsf3+0x1c>
    128a:	0e 94 86 07 	call	0xf0c	; 0xf0c <__fp_pscB>
    128e:	20 f0       	brcs	.+8      	; 0x1298 <__mulsf3+0x1c>
    1290:	95 23       	and	r25, r21
    1292:	11 f0       	breq	.+4      	; 0x1298 <__mulsf3+0x1c>
    1294:	0c 94 68 07 	jmp	0xed0	; 0xed0 <__fp_inf>
    1298:	0c 94 7c 07 	jmp	0xef8	; 0xef8 <__fp_nan>
    129c:	11 24       	eor	r1, r1
    129e:	0c 94 c1 07 	jmp	0xf82	; 0xf82 <__fp_szero>

000012a2 <__mulsf3x>:
    12a2:	0e 94 9e 07 	call	0xf3c	; 0xf3c <__fp_split3>
    12a6:	70 f3       	brcs	.-36     	; 0x1284 <__mulsf3+0x8>

000012a8 <__mulsf3_pse>:
    12a8:	95 9f       	mul	r25, r21
    12aa:	c1 f3       	breq	.-16     	; 0x129c <__mulsf3+0x20>
    12ac:	95 0f       	add	r25, r21
    12ae:	50 e0       	ldi	r21, 0x00	; 0
    12b0:	55 1f       	adc	r21, r21
    12b2:	62 9f       	mul	r22, r18
    12b4:	f0 01       	movw	r30, r0
    12b6:	72 9f       	mul	r23, r18
    12b8:	bb 27       	eor	r27, r27
    12ba:	f0 0d       	add	r31, r0
    12bc:	b1 1d       	adc	r27, r1
    12be:	63 9f       	mul	r22, r19
    12c0:	aa 27       	eor	r26, r26
    12c2:	f0 0d       	add	r31, r0
    12c4:	b1 1d       	adc	r27, r1
    12c6:	aa 1f       	adc	r26, r26
    12c8:	64 9f       	mul	r22, r20
    12ca:	66 27       	eor	r22, r22
    12cc:	b0 0d       	add	r27, r0
    12ce:	a1 1d       	adc	r26, r1
    12d0:	66 1f       	adc	r22, r22
    12d2:	82 9f       	mul	r24, r18
    12d4:	22 27       	eor	r18, r18
    12d6:	b0 0d       	add	r27, r0
    12d8:	a1 1d       	adc	r26, r1
    12da:	62 1f       	adc	r22, r18
    12dc:	73 9f       	mul	r23, r19
    12de:	b0 0d       	add	r27, r0
    12e0:	a1 1d       	adc	r26, r1
    12e2:	62 1f       	adc	r22, r18
    12e4:	83 9f       	mul	r24, r19
    12e6:	a0 0d       	add	r26, r0
    12e8:	61 1d       	adc	r22, r1
    12ea:	22 1f       	adc	r18, r18
    12ec:	74 9f       	mul	r23, r20
    12ee:	33 27       	eor	r19, r19
    12f0:	a0 0d       	add	r26, r0
    12f2:	61 1d       	adc	r22, r1
    12f4:	23 1f       	adc	r18, r19
    12f6:	84 9f       	mul	r24, r20
    12f8:	60 0d       	add	r22, r0
    12fa:	21 1d       	adc	r18, r1
    12fc:	82 2f       	mov	r24, r18
    12fe:	76 2f       	mov	r23, r22
    1300:	6a 2f       	mov	r22, r26
    1302:	11 24       	eor	r1, r1
    1304:	9f 57       	subi	r25, 0x7F	; 127
    1306:	50 40       	sbci	r21, 0x00	; 0
    1308:	9a f0       	brmi	.+38     	; 0x1330 <__mulsf3_pse+0x88>
    130a:	f1 f0       	breq	.+60     	; 0x1348 <__mulsf3_pse+0xa0>
    130c:	88 23       	and	r24, r24
    130e:	4a f0       	brmi	.+18     	; 0x1322 <__mulsf3_pse+0x7a>
    1310:	ee 0f       	add	r30, r30
    1312:	ff 1f       	adc	r31, r31
    1314:	bb 1f       	adc	r27, r27
    1316:	66 1f       	adc	r22, r22
    1318:	77 1f       	adc	r23, r23
    131a:	88 1f       	adc	r24, r24
    131c:	91 50       	subi	r25, 0x01	; 1
    131e:	50 40       	sbci	r21, 0x00	; 0
    1320:	a9 f7       	brne	.-22     	; 0x130c <__mulsf3_pse+0x64>
    1322:	9e 3f       	cpi	r25, 0xFE	; 254
    1324:	51 05       	cpc	r21, r1
    1326:	80 f0       	brcs	.+32     	; 0x1348 <__mulsf3_pse+0xa0>
    1328:	0c 94 68 07 	jmp	0xed0	; 0xed0 <__fp_inf>
    132c:	0c 94 c1 07 	jmp	0xf82	; 0xf82 <__fp_szero>
    1330:	5f 3f       	cpi	r21, 0xFF	; 255
    1332:	e4 f3       	brlt	.-8      	; 0x132c <__mulsf3_pse+0x84>
    1334:	98 3e       	cpi	r25, 0xE8	; 232
    1336:	d4 f3       	brlt	.-12     	; 0x132c <__mulsf3_pse+0x84>
    1338:	86 95       	lsr	r24
    133a:	77 95       	ror	r23
    133c:	67 95       	ror	r22
    133e:	b7 95       	ror	r27
    1340:	f7 95       	ror	r31
    1342:	e7 95       	ror	r30
    1344:	9f 5f       	subi	r25, 0xFF	; 255
    1346:	c1 f7       	brne	.-16     	; 0x1338 <__mulsf3_pse+0x90>
    1348:	fe 2b       	or	r31, r30
    134a:	88 0f       	add	r24, r24
    134c:	91 1d       	adc	r25, r1
    134e:	96 95       	lsr	r25
    1350:	87 95       	ror	r24
    1352:	97 f9       	bld	r25, 7
    1354:	08 95       	ret

00001356 <_exit>:
    1356:	f8 94       	cli

00001358 <__stop_program>:
    1358:	ff cf       	rjmp	.-2      	; 0x1358 <__stop_program>
